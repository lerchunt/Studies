/*
 *   Ce fichier fait partie d'un projet de programmation donné en Licence 3 
 *   à l'Université de Bordeaux.
 *
 *   Copyright (C) 2015 Giuliana Bianchi, Adrien Boussicault, Thomas Place, Marc Zeitoun
 *
 *    This Library is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This Library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this Library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "rationnel.h"
#include "ensemble.h"
#include "automate.h"
#include "parse.h"
#include "scan.h"
#include "outils.h"

#include <stdbool.h>
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

int yyparse(Rationnel **rationnel, yyscan_t scanner);
//int numero_courrent = 1; // Le numéro qui sera donné à la lettre à numéroter
Rationnel *rationnel(Noeud etiquette, char lettre, int position_min, int position_max, void *data, Rationnel *gauche, Rationnel *droit, Rationnel *pere)
{
   Rationnel *rat;
   rat = (Rationnel *) malloc(sizeof(Rationnel));

   rat->etiquette = etiquette;
   rat->lettre = lettre;
   rat->position_min = position_min;
   rat->position_max = position_max;
   rat->data = data;
   rat->gauche = gauche;
   rat->droit = droit;
   rat->pere = pere;
   return rat;
}

Rationnel *Epsilon()
{
   return rationnel(EPSILON, 0, 0, 0, NULL, NULL, NULL, NULL);
}

Rationnel *Lettre(char l)
{
   return rationnel(LETTRE, l, 0, 0, NULL, NULL, NULL, NULL);
}

Rationnel *Union(Rationnel* rat1, Rationnel* rat2)
{
   // Cas particulier où rat1 est vide
   if (!rat1)
      return rat2;

   // Cas particulier où rat2 est vide
   if (!rat2)
      return rat1;
   
   return rationnel(UNION, 0, 0, 0, NULL, rat1, rat2, NULL);
}

Rationnel *Concat(Rationnel* rat1, Rationnel* rat2)
{
   if (!rat1 || !rat2)
      return NULL;

   if (get_etiquette(rat1) == EPSILON)
      return rat2;

   if (get_etiquette(rat2) == EPSILON)
      return rat1;
   
   return rationnel(CONCAT, 0, 0, 0, NULL, rat1, rat2, NULL);
}

Rationnel *Star(Rationnel* rat)
{
   return rationnel(STAR, 0, 0, 0, NULL, rat, NULL, NULL);
}

bool est_racine(Rationnel* rat)
{
   return (rat->pere == NULL);
}

Noeud get_etiquette(Rationnel* rat)
{
   return rat->etiquette;
}

char get_lettre(Rationnel* rat)
{
   assert (get_etiquette(rat) == LETTRE);
   return rat->lettre;
}

int get_position_min(Rationnel* rat)
{
   return rat->position_min;
}

int get_position_max(Rationnel* rat)
{
   return rat->position_max;
}

void set_position_min(Rationnel* rat, int valeur)
{
   rat->position_min = valeur;
   return;
}

void set_position_max(Rationnel* rat, int valeur)
{
   rat->position_max = valeur;
   return;
}

Rationnel *fils_gauche(Rationnel* rat)
{
   assert((get_etiquette(rat) == CONCAT) || (get_etiquette(rat) == UNION));
   return rat->gauche;
}

Rationnel *fils_droit(Rationnel* rat)
{
   assert((get_etiquette(rat) == CONCAT) || (get_etiquette(rat) == UNION));
   return rat->droit;
}

Rationnel *fils(Rationnel* rat)
{
   assert(get_etiquette(rat) == STAR);
   return rat->gauche;
}

Rationnel *pere(Rationnel* rat)
{
   assert(!est_racine(rat));
   return rat->pere;
}

void print_rationnel(Rationnel* rat)
{
   if (rat == NULL)
   {
      printf("∅");
      return;
   }
   
   switch(get_etiquette(rat))
   {
      case EPSILON:
         printf("ε");         
         break;
         
      case LETTRE:
         printf("%c", get_lettre(rat));
         break;

      case UNION:
         printf("(");
         print_rationnel(fils_gauche(rat));
         printf(" + ");
         print_rationnel(fils_droit(rat));
         printf(")");         
         break;

      case CONCAT:
         printf("[");
         print_rationnel(fils_gauche(rat));
         printf(" . ");
         print_rationnel(fils_droit(rat));
         printf("]");         
         break;

      case STAR:
         printf("{");
         print_rationnel(fils(rat));
         printf("}*");         
         break;

      default:
         assert(false);
         break;
   }
}

Rationnel *expression_to_rationnel(const char *expr)
{
    Rationnel *rat;
    yyscan_t scanner;
    YY_BUFFER_STATE state;

    // Initialisation du scanner
    if (yylex_init(&scanner))
        return NULL;
 
    state = yy_scan_string(expr, scanner);

    // Test si parsing ok.
    if (yyparse(&rat, scanner)) 
        return NULL;
    
    // Libération mémoire
    yy_delete_buffer(state, scanner);
 
    yylex_destroy(scanner);
 
    return rat;
}

void rationnel_to_dot(Rationnel *rat, char* nom_fichier)
{
   FILE *fp = fopen(nom_fichier, "w+");
   rationnel_to_dot_aux(rat, fp, -1, 1);
}

int rationnel_to_dot_aux(Rationnel *rat, FILE *output, int pere, int noeud_courant)
{   
   int saved_pere = noeud_courant;

   if (pere >= 1)
      fprintf(output, "\tnode%d -> node%d;\n", pere, noeud_courant);
   else
      fprintf(output, "digraph G{\n");
   
   switch(get_etiquette(rat))
   {
      case LETTRE:
         fprintf(output, "\tnode%d [label = \"%c-%d\"];\n", noeud_courant, get_lettre(rat), rat->position_min);
         noeud_courant++;
         break;

      case EPSILON:
         fprintf(output, "\tnode%d [label = \"ε-%d\"];\n", noeud_courant, rat->position_min);
         noeud_courant++;
         break;

      case UNION:
         fprintf(output, "\tnode%d [label = \"+ (%d/%d)\"];\n", noeud_courant, rat->position_min, rat->position_max);
         noeud_courant = rationnel_to_dot_aux(fils_gauche(rat), output, noeud_courant, noeud_courant+1);
         noeud_courant = rationnel_to_dot_aux(fils_droit(rat), output, saved_pere, noeud_courant+1);
         break;

      case CONCAT:
         fprintf(output, "\tnode%d [label = \". (%d/%d)\"];\n", noeud_courant, rat->position_min, rat->position_max);
         noeud_courant = rationnel_to_dot_aux(fils_gauche(rat), output, noeud_courant, noeud_courant+1);
         noeud_courant = rationnel_to_dot_aux(fils_droit(rat), output, saved_pere, noeud_courant+1);
         break;

      case STAR:
         fprintf(output, "\tnode%d [label = \"* (%d/%d)\"];\n", noeud_courant, rat->position_min, rat->position_max);
         noeud_courant = rationnel_to_dot_aux(fils(rat), output, noeud_courant, noeud_courant+1);
         break;
         
      default:
         assert(false);
         break;
   }
   if (pere < 0)
      fprintf(output, "}\n");
   return noeud_courant;
}

void numeroter_rationnel_aux(Rationnel *rat, int *numero_courrent)
{
	   switch (get_etiquette(rat)) {
		case LETTRE:
			set_position_min(rat, *numero_courrent);
			set_position_max(rat,get_position_min(rat));
			*numero_courrent = *numero_courrent + 1;
			break;
		case EPSILON:
			break;
		case UNION:
		case CONCAT:
			numeroter_rationnel_aux(rat->gauche, numero_courrent);
			if (get_etiquette(rat->gauche) == EPSILON)
			{
				set_position_min(rat, rat->droit->position_min);
			} 
			else {										
				set_position_min(rat, rat->gauche->position_min);
			}
			numeroter_rationnel_aux(rat->droit, numero_courrent);
			if (get_etiquette(rat->droit) == EPSILON)
			{
				set_position_max(rat, rat->gauche->position_max);				
			} 
			else {			
				set_position_max(rat, rat->droit->position_max);			
			}
			break;
		case STAR:
			numeroter_rationnel_aux(rat->gauche, numero_courrent);
			if (get_etiquette(rat->gauche) != EPSILON)
			{			
				set_position_min(rat, rat->gauche->position_min);				
				set_position_max(rat, rat->gauche->position_max);
			}
						
			break;
		default:
			assert(false);
			break;


   }
}

void numeroter_rationnel(Rationnel *rat)
{
	int   numero_courrent = 1;
	numeroter_rationnel_aux(rat, &numero_courrent);
}

bool contient_mot_vide(Rationnel *rat)
{
	
	switch (get_etiquette(rat)) {
		case LETTRE:
				return false;
				break;
		case STAR:
			return true;
			break;
		case UNION:
			return (contient_mot_vide(rat->gauche) || contient_mot_vide(rat->droit));
		case CONCAT:
			return (contient_mot_vide(rat->gauche) && contient_mot_vide(rat->droit));
			break;
		case EPSILON:
			return true;
			break;
		default:
			assert(false);
			break;
	}

}

void premier_aux(Rationnel *rat, Ensemble *e)
{
   	switch (get_etiquette(rat)) {
		case LETTRE:
				ajouter_element(e, rat->position_min);								
				break;
		case STAR:
			 premier_aux(rat->gauche, e);
			break;
		case UNION:		
			premier_aux(rat->gauche, e);
			premier_aux(rat->droit, e);
			break;
		case CONCAT:
			if (contient_mot_vide(rat->gauche))
			{			
				premier_aux(rat->gauche, e);
				premier_aux(rat->droit, e);
			}
			else {
				 (premier_aux(rat->gauche, e));
			}
			break;
		case EPSILON:
			break;
		default:
			assert(false);
			break;
	}
}

Ensemble *premier(Rationnel *rat)
{
	Ensemble *e = creer_ensemble(NULL, NULL, NULL) ;
	
	premier_aux(rat, e);
	return e;
}

void dernier_aux(Rationnel *rat, Ensemble *e)
{
   	switch (get_etiquette(rat)) {
		case LETTRE:
				ajouter_element(e, rat->position_min);								
				break;
		case STAR:
			 dernier_aux(rat->gauche, e);
			break;
		case UNION:		
			dernier_aux(rat->gauche, e);
			dernier_aux(rat->droit, e);
			break;
		case CONCAT:
			if (contient_mot_vide(rat->droit))
			{			
				dernier_aux(rat->gauche, e);
				dernier_aux(rat->droit, e);
			}
			else {
				 dernier_aux(rat->droit, e);
			}
			break;
		case EPSILON:
			break;
		default:
			assert(false);
			break;
	}
}

Ensemble *dernier(Rationnel *rat)
{
   	Ensemble *e = creer_ensemble(NULL, NULL, NULL) ;
	
	dernier_aux(rat, e);
	return e;
}


void suivant_aux(Rationnel *rat, Ensemble *e,int position)
{
   	switch (get_etiquette(rat)) {
		case LETTRE:
				break;
		case STAR:
            suivant_aux(rat->gauche,e,position);
            if(est_dans_l_ensemble(dernier(rat->gauche),position))
                premier_aux(rat->gauche,e);
			break;
		case UNION:
            if(position<=rat->gauche->position_max)
                suivant_aux(rat->gauche,e,position);
            if(position>=rat->droit->position_min)
                suivant_aux(rat->droit,e,position);
			break;
		case CONCAT:
            if(position<=rat->gauche->position_max)
                suivant_aux(rat->gauche,e,position);
            if(position>=rat->droit->position_min)
                suivant_aux(rat->droit,e,position);
            if(est_dans_l_ensemble(dernier(rat->gauche),position))
                premier_aux(rat->droit,e);
        
			break;
		case EPSILON:
			break;
		default:
			assert(false);
			break;
	}	
}
Ensemble *suivant(Rationnel *rat, int position)
{
   	Ensemble *e = creer_ensemble(NULL, NULL, NULL) ;
	
	suivant_aux(rat, e, position);
	return e;
}

void lettre_from_position_aux(Rationnel *rat, int position, char *lettre){
	
	   	switch (get_etiquette(rat)) {
		case LETTRE:
				if (position == rat->position_min)
				{
					*lettre = rat->lettre;
				}									
				break;
		case STAR:
			 lettre_from_position_aux(rat->gauche, position, lettre);
			break;
		case CONCAT:
		case UNION:		
			lettre_from_position_aux(rat->gauche, position, lettre);
			lettre_from_position_aux(rat->droit, position, lettre);
			break;
		case EPSILON:
			break;
		default:
			assert(false);
			break;
	}
}
char lettre_from_position(Rationnel *rat,int position){
   
   char lettre = ' ';
   lettre_from_position_aux(rat, position, &lettre);
   
   return lettre;
   
}

Automate *Glushkov(Rationnel *rat)
{
    int i,j;
    Automate *glu =creer_automate();
    Ensemble *premier_glu = premier(rat);
    
    ajouter_etat_initial(glu,0); // ajout de l'état initial    
    
    for(i=1;i<=rat->position_max;i++) //création des autres états
        ajouter_etat(glu,i);    
    
    Ensemble_iterateur it= premier_iterateur_ensemble(premier_glu);
    
    for(i=1;i<=taille_ensemble(premier_glu);i++)
    {
        ajouter_transition(glu,0,lettre_from_position(rat,get_element(it)),get_element(it));        
        it= iterateur_suivant_ensemble(it);
    }
    /* jusqu'ici je crée tous les états, puis pour tous les premiers, je créé une transition du premier état vers eux */
    
    /*
     *  Pour chaque état de 1 à max, créer une transition de l'état vers chacun de ces suivant.
     */
    for(i=1;i<=rat->position_max;i++)
    {
        it=premier_iterateur_ensemble(suivant(rat,i));

        //verifier si ensemble non vide
        if(iterateur_ensemble_est_vide(it)==0){
			
			for(j=1;j<=taille_ensemble(suivant(rat,i));j++)
			{
				ajouter_transition(glu,i,lettre_from_position(rat,get_element(it)),get_element(it));				
				it= iterateur_suivant_ensemble(it);
			}
		}
    }
    /*
     Pour chacun des derniers => état final
     */
   if (contient_mot_vide(rat))
   {
	   ajouter_etat_final(glu,0);
   }  
    it=premier_iterateur_ensemble(dernier(rat));
    if(iterateur_ensemble_est_vide(it)==0){
    for(j=0;j<taille_ensemble(dernier(rat));j++){
		ajouter_etat_final(glu,get_element(it));
		it= iterateur_suivant_ensemble(it);
	}
        
	}
    
    return glu;
}

bool meme_langage (const char *expr1, const char* expr2)
{
   A_FAIRE_RETURN(true);
}

Systeme systeme(Automate *automate)
{
   A_FAIRE_RETURN(NULL);
}

void print_ligne(Rationnel **ligne, int n)
{
   for (int j = 0; j <=n; j++)
      {
         print_rationnel(ligne[j]);
         if (j<n)
            printf("X%d\t+\t", j);
      }
   printf("\n");
}

void print_systeme(Systeme systeme, int n)
{
   for (int i = 0; i <= n-1; i++)
   {
      printf("X%d\t= ", i);
      print_ligne(systeme[i], n);
   }
}

Rationnel **resoudre_variable_arden(Rationnel **ligne, int numero_variable, int n)
{
   A_FAIRE_RETURN(NULL);
}

Rationnel **substituer_variable(Rationnel **ligne, int numero_variable, Rationnel **valeur_variable, int n)
{
   A_FAIRE_RETURN(NULL);
}

Systeme resoudre_systeme(Systeme systeme, int n)
{
   A_FAIRE_RETURN(NULL);
}

Rationnel *Arden(Automate *automate)
{
   A_FAIRE_RETURN(NULL);
}

