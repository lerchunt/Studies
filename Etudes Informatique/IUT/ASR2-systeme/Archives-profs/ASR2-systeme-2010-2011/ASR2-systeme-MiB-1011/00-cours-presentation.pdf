%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: 00-cours-presentation.pdf
%%Creator: Adobe Acrobat 9.3.2
%%For: stephanie
%%CreationDate: 11/05/2010, 11:09:15
%%BoundingBox: 12 12 600 780
%%HiResBoundingBox: 12 12 600 780
%%CropBox: 12 12 600 780
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1180 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2010-04-06T09:12:33+02:00"
   xmp:CreatorTool="LaTeX with beamer class version 3.07"
   xmp:ModifyDate="2010-04-06T09:12:33+02:00"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.3"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX using libpoppler, Version 3.141592-1.40.3-2.2 (Web2C 7.5.6) kpathsea version 3.5.6">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Semestre 2, année 2009-2010</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Présentation du cours ASR2-Système</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ZOQAAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 656 678] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10 /ZOQAAA+CMSS10 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /YIZAAA+CMSS8 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000801 def
/FontBBox {-65 -250 1062 761} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 656 677] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [66] def
/StdVW [87] def
/StemSnapH [59 66] def
/StemSnapV [87 101] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B08A9596FE72ACE143EF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8 /YIZAAA+CMSS8 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /SFVBAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 655 676] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B08A9563F93DCB7939BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12 /SFVBAA+CMSS12 findfont ct_VMDictPut
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /AMRBAA+CMSSBX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000806 def
/FontBBox {-71 -250 1099 780} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 458 475] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [94] def
/StdVW [136] def
/StemSnapV [136 147] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B08A95930012410A3521> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10 /AMRBAA+CMSSBX10 findfont ct_VMDictPut
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
%ADOBeginSubsetFont: UGKAAA+CMSSI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /UGKAAA+CMSSI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -12 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000810 def
/FontBBox {-97 -250 1077 759} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 656 678] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [80] def
/StemSnapH [61 65] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JRFCXG+CMSSI10 /UGKAAA+CMSSI10 findfont ct_VMDictPut
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
true set_gvm
reset_gvm
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
12 12 mo
12 780 li
600 780 li
600 12 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
43.2815 208.019 mo
286.478 208.019 li
286.478 25.6212 li
43.2815 25.6212 li
cp
clp
43.2815 208.019 mo
286.478 208.019 li
286.478 25.6212 li
43.2815 25.6212 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
204.076 205.147 mo
206.347 205.147 li
206.347 203.545 li
204.076 203.545 li
cp
.308354 .28983 0 0 cmyk
@
201.215 205.346 mo
199.874 204.341 li
201.215 203.336 li
.138705 .129152 0 0 cmyk
f
209.258 205.346 mo
210.599 204.341 li
209.258 203.336 li
f
217.746 205.682 mo
220.017 205.682 li
220.017 204.079 li
217.746 204.079 li
cp
218.3 204.073 mo
218.3 203.537 li
220.579 203.537 li
220.579 205.145 li
220.043 205.145 li
218.836 203.537 mo
218.836 203 li
221.115 203 li
221.115 204.609 li
220.579 204.609 li
.308354 .28983 0 0 cmyk
@
215.753 205.346 mo
214.413 204.341 li
215.753 203.336 li
223.796 205.346 mo
225.137 204.341 li
223.796 203.336 li
.138705 .129152 0 0 cmyk
f
.40066 lw
233.642 203.671 mo
235.653 203.671 li
.308354 .28983 0 0 cmyk
@
230.291 205.346 mo
228.95 204.341 li
230.291 203.336 li
238.334 205.346 mo
239.674 204.341 li
238.334 203.336 li
.138705 .129152 0 0 cmyk
f
232.972 203 mo
234.982 203 li
233.642 204.341 mo
235.653 204.341 li
232.972 205.011 mo
234.982 205.011 li
233.642 205.682 mo
235.653 205.682 li
@
247.51 203 mo
249.521 203 li
248.18 203.671 mo
250.191 203.671 li
248.18 204.341 mo
250.191 204.341 li
.308354 .28983 0 0 cmyk
@
244.829 205.346 mo
243.488 204.341 li
244.829 203.336 li
252.872 205.346 mo
254.213 204.341 li
252.872 203.336 li
.138705 .129152 0 0 cmyk
f
247.51 205.011 mo
249.521 205.011 li
248.18 205.682 mo
250.191 205.682 li
@
262.047 203 mo
264.058 203 li
262.717 203.671 mo
264.728 203.671 li
262.717 204.341 mo
264.728 204.341 li
262.047 205.011 mo
264.058 205.011 li
262.717 205.682 mo
264.728 205.682 li
.308354 .28983 0 0 cmyk
@
278.194 204.609 mo
279.266 205.682 li
@
.267102 lw
278.368 204.012 mo
278.368 203.567 278.012 203.211 277.567 203.211 cv
277.122 203.211 276.766 203.567 276.766 204.012 cv
276.766 204.457 277.122 204.813 277.567 204.813 cv
278.012 204.813 278.368 204.457 278.368 204.012 cv
cp
@
1 lc
273.904 205.682 mo
274.629 205.682 275.245 205.078 275.245 204.341 cv
275.245 203.604 274.642 203 273.904 203 cv
273.167 203 272.564 203.604 272.564 204.341 cv
273.368 203.939 mo
272.564 204.609 li
271.759 203.939 li
281.948 205.682 mo
281.21 205.682 280.607 205.078 280.607 204.341 cv
280.607 203.604 281.21 203 281.948 203 cv
282.685 203 283.288 203.604 283.288 204.341 cv
284.092 203.939 mo
283.288 204.609 li
282.484 203.939 li
@
43.2815 32.0759 mo
286.478 32.0759 li
286.478 25.6205 li
43.2815 25.6205 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/grave <1C60D8A8C9B08A95D352586DE3156C55B1A274B2B72067B23772C04E
1AA6F3F64A4E2C4CCC0021626313> |-
/acute <1C60D8A8C9B08A95D352586DE3156C55B1A274B2B72074ACB3903962
4978106F4737D468B4198AC90A3326> |-
/hyphen <1C60D8A8C9B08A9596FE72ACE1431602C8E950A714EFF1E32E0047B
A53475FB05D2A1936> |-
/two <1C60D8A8C9B08A95D352586DE3151F07BA6FD0F15833F9E3DE5EBCDD45
5DEF0650BE01919EE999B921A7C37AE1B5D94321D0F127D5E5192C6CE2E6B353
B5D27F35ED87501BAC614D7A59BE22912F5AD166806F5E6EE1AA7FBFFC339CEF
0888D1EC027E5A1CCD2996E81F48AA76D7B767C44F31ACD5459E> |-
/A <1C60D8A8C9B08A945A1AB9ADE1431F4D4C7EC6910270DA9965D476F0AAE4
82DE422D9ABEC4C624750742D8C70AA9971950580386F314ED979C1D8C4E9F49
E07CD5C07FA8> |-
/P <1C60D8A8C9B08A94477239F1F273E567B028BF66B53F30B60F1AAE9E02F7
D57929F6FED56CEEBA397791449BDFE8E321169164F230987A08AD17A9A1475E
49EE8782FD3EBEAA950EF0D6B64EE105951CB47F027F03098339> |-
/R <1C60D8A8C9B08A9506528433F82F52EE6DFD61638AFF8ED0F6E49C55B844
252187C4223B835F0F6A116787EA420C965CB8E30C149867A675CF2F9B5AE335
3EA84A90AF77969A49522919CBE307334CEA60892148BE48C0E8B31E79EC5C01
77D75D4F0C> |-
/S <1C60D8A8C9B08A95FADDBDE5FC18BC799D54DBAB6B2FD6F8D2178DDE34AF
1C8993814A6AAF2B6819426231E0A694EBB80D61AF56991ACB207F6A717B8C60
363F1D11BD5A11BA7379038C82D6A30738FB4DF2FD4DAB0EBC2F41D753458E93
8C29D3E3CADC5A69AE37164B39C6625729D2114A7C1CB56B24075C1006FF6706
7418FD8777D420BC250C3658249492436E1EFB81> |-
/a <1C60D8A8C9B08A95DB28430F7014161FF34515CF999D3EA4393D83487496
48D6E8920F24BAB90D710F7C9F3E890E9A0684F1217BAEF01D7A40F03A22268C
4E20C7C4C025DCCB16B66C64450FB650053DA25871C776DF6AD29418625D16D6
B7A22A18A58C6A20B0A03AD67090E136D2A623CF6DB32892668B9B6250F2B3> |-
/c <1C60D8A8C9B08A95A487F5C1974CBC46EDFA024B10BFB82411DB9E6ED2A0
E93DEF0A35A251D920BFDAA2A7B46E6CBC92605CBA9B7BD58F9E0E0F22DBFDD9
F40F67CFFC104E724BE31C70114FEE7FB1A015AD23F1DD1A43926E> |-
/d <1C60D8A8C9B08A95CADB2E0FDF2144EBE0376508D811B328E7D70E2FE0BC
E4BA97FC3B326C454ED63825D1C7F6E07AD0C407528F66B2409DED9F38D9EF56
87F6097E025F5B999DC231BDE6827F638EF77F11FD1F9BDF4B0BABDA647EF1DF
9C80C1204C783F65116933> |-
/e <1C60D8A8C9B08A95A487F5C1974CBC5BDAADE84D2519473ADA857CF323C1
531CAD5B4F52A3607E2E7E14D187064DADC2B60F9198B7518A01DA501B426BBD
B66B30E2F7F9F5FC2B656F5C44680AF59260F6A73D520D43BF83BC3E70663D37
160A8B27AAF5B392D06E> |-
/i <1C60D8A8C9B08A957F18A8F05374566C54B3F131F13F95C22E46A72210C0
1F61090D743E7C213D1F57D26842EF5CC50EFFDF11134D> |-
/m <1C60D8A8C9B08A940725CA4686523F5E4BA492710E2BD7FE9B58417B72F4
ED76AE99B79CCD25919E29510000C440C68FE168F218555923CA26C1D5B5D915
C804F2218CD86095C0A5A448A8B2678F584A249A24E8F3CBD1A38D8299A9EE06
81CDBD0859EF09C19C7E6F6C918736D3> |-
/n <1C60D8A8C9B08A95CADB2E0FDF214E965EEE6A31BF07513AF3D24D78824B
3E6C6ABEE9F370367376A7CE04A537C7A0001D37E4BD39292215E9D356226EA9
131646E85A12A1282CAB5B15ED> |-
/o <1C60D8A8C9B08A95D352586DE315151F0C9B78479922FD3E6C9893F15D45
86B2140D4A4478EAFADB947B582120E117287CD2DF2FCE24199168377CA0504E
0C0BE83D11C4F89E14A0860926970E4FEE1B073415A5894BDDADFBA30AE560BC
FA> |-
/r <1C60D8A8C9B08A959122DC3B14EDDFCB397F3EF6B08D988D22D83D5CE86B
8D2CCA7075727E4338E5AFC13950BF9D54804E4A8B7E1CF3330648> |-
/s <1C60D8A8C9B08A9513EC80F28A41BF87157FDA4623F5273C2BD0C4E6D6AC
0CE2C31A91DF1BD8BA9355DE114E1B20382A66DC7664BDB6776A450E9C22675A
0D0CA24171BB35EE2DD06BA8801270E6D847E65A096EC93AF01A345A28D6D17F
8D9EEE450308A68A824C28A0F8262739B8FECD34860AAC34A2A7057864825C85
CC6017F1B2A294D995C85740D9> |-
/t <1C60D8A8C9B08A9589CB49B41630CF5E51AE136E9062C16038719333849C
3269AD8A1B72076DFFE2F35CC12F3F72FF08F607A1C4D8933DFEF117E940A58E
989DE0E131D0212EB3F4DA90F61A97BA63870873D14909B6A1B3> |-
/u <1C60D8A8C9B08A95CADB2E0FDF2144E002D2CA061C4CDFE79D376BF1561F
916FDEFDB49FCED5C79273B645176822F2A7DD613F126518702594614D6B1CB2
6F0173F3C758B36818FBBB16> |-
/y <1C60D8A8C9B08A95A31DE9FFB66A6565D5551F906784D46B9447616F9DD1
2B9A8805BB11E36465513461847268DC2EB0903E82F2474A8D998945C2047545
F0E6D0687A549D97BBFA68FA82F0AFDDA7C143D6CF3253F639B0693F9B314351
D7A7A92DA1DCEE4A91> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 18 /grave put
dup 19 /acute put
dup 45 /hyphen put
dup 50 /two put
dup 65 /A put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[18{/.notdef}rp /grave /acute 25{/.notdef}rp /hyphen 4{/.notdef}rp /two 14{/.notdef}rp 
/A 14{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
48.9815 30.0731 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.71969 1.33379 .121384 1.89191 1.6319 1.89191 2.19802 1.53732 2.04499 1.53732 1.01565 2.12869 
3.61635 2.19802 3.61636 1.89191 2.12869 2.19802 1.45399 3.05024 2.83786 2.3651 2.75454 2.12868 
1.41914 2.3651 1.9616 1.6319 1.42113 .117371 1.89191 3.38075 0 ]xsh
43.2815 38.5313 mo
286.478 38.5313 li
286.478 32.0759 li
43.2815 32.0759 li
cp
.824216 .796414 0 0 cmyk
f
43.2815 44.9859 mo
286.478 44.9859 li
286.478 38.5306 li
43.2815 38.5306 li
cp
.514061 .481117 0 0 cmyk
f
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/grave <1C60D8A8C9B08A95A31CD7D9F217DFE59C76D2880ECF7106F53C49A9
A8970DFA34F8245CEE6CE38F8FD7> |-
/acute <1C60D8A8C9B08A95A31CD7D9F217DFE59C76D2880ECF5B69D1D42524
43D71836B5E6D7F211454995A09802> |-
/hyphen <1C60D8A8C9B08A9563F93DCB793945E7BEE8284AE1E59A20EA03496
C304FC3E64B5A357D> |-
/two <1C60D8A8C9B08A95A31CD7D9F217ACE8E4C5480360774D2BCC43562146
1448D53FD51E7E4D1F8758DA684C0F4C4801EF6AD05D0C77806B6EF55ECE0534
8C68F66C84579DCB94B484174112D2726269FC492CC2E429EF83EA1C051E41D7
736383942C7D82BA534250> |-
/A <1C60D8A8C9B08A95E0E86DD3D35C1EC96C676F01E9A265048F4C62D89CB1
AC1A0276333355878729FDB5C9C6DAA5F36F803B505C464FC5423FA44CF35AD1
1BB3E5A8B06E8FFC6118> |-
/P <1C60D8A8C9B08A95EF574D27FCC3E4AD1365BD5458B3224CAE7D4D30D1E3
EB6B11C3CE9A4834AB4372A104C04DF3EB9EE9A78CCA7B9CE238EE9BB6BF1422
757359E92A20AB7B9AAFF34B633A923A87B89D4534A0F930> |-
/R <1C60D8A8C9B08A950473ED54B685FF9A0737A72C10DC8182660A478D6484
4A4EF90B6375B7375447CED09B73989D67EAF43A4B291783C63CCA8F086B1D32
EABD8A6A3E5F275095F8C7F9F835FCBF54131EF35194A8396111E677F144F44E
10B416BE> |-
/S <1C60D8A8C9B08A95C885DB2659C88FD2DAC972C2503A689198AB4B3225B9
68E80B5EB73D3555758A317DCA71AB6822D6E0E00C9BA3020784B5001D40D821
0AD9B6DFB6B325A7C59892E21AA643952EF18B033FC4D33190A9728EC706283A
5B6987C8EA9A1BF44811A78B7154E81D19762911D2F1D749A78F890FF2BF985D
E8593A7E53226F6EADEC08C071CD0D95051494> |-
/a <1C60D8A8C9B08A95AB8DC622FEBB6EFF06B75EF6258DE24B779154260802
09CB95D8B91CC3B7736DBF97AE14274E0B6510D496F67062BFCE0BB9CBACBE35
5F30492B158AC74EB9B3916A328DFB0878E37507C5BCF3AAC286368133DFF49E
5BFBAE5B0F32B9FF9A26081328FEE6F2CD893A23BE17B2365CDBE122DD403C74
5D10> |-
/c <1C60D8A8C9B08A95B5589A17E299A83714C20537662F3B21D7A1F6748813
7EE8F8989BE1733172CD364BFC7FCB06F306148983BDDAEF22E29B526FD7F366
D8B31143EED2A05EDA8050128ABD5A88912DE79EA26B9F558DADFB6CF8334A6B> |-
/d <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05517066D38D
ABBDEC65403CE063C0EA82DFE6D2FDF5BA1BBD31046A4120919C9B005E02E215
E02C7060E04810197A4EE37E54B068AAD7A07D32D37F6835A705F045AD78BB47
E46188A54523911A939C12> |-
/e <1C60D8A8C9B08A95B5589A17E299A839B353761A5754405332DB751515E1
39F49B25FCC8C9DC8E3EBCFAC169ACB1889E709DBE3BE8BCDEBEDBEBD2E7A5D0
CB9FE062E3F18084EF219DED1EBBC816BE1DD940708D3FE9C79213BBC3FE62C8
E2F15DD9B8C87592CA19D102E03E0A3373B50DE6098AFA0A314B> |-
/i <1C60D8A8C9B08A9545AEAF563F384DC2228F717BF90667A52C65A5379193
AB133511F7507802DAB6A8197D0254965D7A9693EB947D> |-
/m <1C60D8A8C9B08A95026F9C287FEF94494F5F295BA6AA092C89C7B7C8F42A
D6ECF94DC23B657C2BEDDCAAAF73855BA7C35045977586FD8F4502D50E30528F
35706E2F7FE6DDDE87FE22397BE27204CBAC52ADB6612CE76C675529AE0C0E78
00CEF282F44050942FB389811CC45B52> |-
/n <1C60D8A8C9B08A95D8E840BC3BFE75A638CC60EDE4E32C5F043D10AD74DF
9A133AEBB7526F4D0EE19DBCFB2DC1F38B66C5E23BE4CADA86F303D1868E0D3A
764094313DE70340C27818A6A5> |-
/o <1C60D8A8C9B08A95A31CD7D9F217A69992F44FA90AA023A397851E23C8E4
CBFCD69F4E7C3676D1839CE0A79E45A4141988EDFB3760BD3C43FD952EA4939A
C78485AB0271866C6B5494B9EB377464114D395D7CA45C9E2453E1E4BA1CE2> |-
/r <1C60D8A8C9B08A959DB77AE556B1923D6116776B12D082BADF5DB74D347F
28D8BBC405A19BD03F9240EAD5B4D10CE1E88EA4C23A53669629> |-
/s <1C60D8A8C9B08A958EAD96EA79E68C696421123C465FF383548823BEE6B0
B1D796EE93EACCAD38184BB40BAED6DACF889E709F6F51268598C5D52183041A
A0B4C8546EC8349093BF0AB0DF900BCCE0E2AD7F1DB19B2D0F599C1A61450945
CB48796545EDE5A4E5DCA108E4149E28953DC631CBB95409F3A88083E00999BE
E6A5BBBA70> |-
/t <1C60D8A8C9B08A9596B916DE68D8C5084A09F6F7CC28E2D467F61B3C384E
4CBB2539885E158BDFC5A71AC496C670DE10727BF0A213AE26DFAC2C451BE67B
4AF66EC8C9F901DC42C63A8759911A0BB39EBAAE3E8151438D> |-
/u <1C60D8A8C9B08A95D8E840BC3BFE7FD458E74C0EB912A241B1F88DCFAA52
25CE3F72EFAB1A278BE54C990161F0EB5771E5D79169C0DB6EB976EAD3F48597
EA3C40C22D9C1EE6DA7573BB> |-
/y <1C60D8A8C9B08A95B2CCC00C0CACA7ED3EA78B54591E25CC4E6A1FDCEB3C
D700CDE1F3C606D0C5AC44A06A2A8E08B513D8F94A49EB734FD6329193B24F4B
FCB108F93DD8457E52FDD2E1D96DC5B76459D2B066BB85A54422AB3DBAAB97AE
4F2C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 18 /grave put
dup 19 /acute put
dup 45 /hyphen put
dup 50 /two put
dup 65 /A put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 25{/.notdef}rp /hyphen 4{/.notdef}rp /two 14{/.notdef}rp 
/A 14{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
91.689 95.7481 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[5.98772 2.94046 .255722 4.18476 3.60886 4.18477 4.83006 3.40022 4.50697 3.40022 2.21454 4.70782 
7.97444 4.83006 7.9648 4.18477 4.70784 4.83006 3.20009 6.74362 6.22147 5.23105 6.05991 4.70784 
3.13861 5.23108 4.30698 3.60886 3.14059 .26535 4.18475 7.44557 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/acute <1C60D8A8C9B7A73DB619E39FEF98FA77355E7DD8877407E4F25142A4
A612D97F632C4B07DE> |-
/comma <1C60D8A8C9B08A9570810981675918941BEC6C7A36625EEAAFD058DA
9FD482C52B27746E5D76B78817A726AA> |-
/hyphen <1C60D8A8C9B08A959E2F69652E8B76B63AB332EDDEBB69AECBA495D
364909C21596AD861> |-
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
/one <1C60D8A8C9B7A73DC516E502D071D3E5EFB09D24340CA928DF0A691007
E1845C890D948062796F6CD87850B222F312B9A1047DDA1457E58E9699EFA460
BF3E57> |-
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641FCF9B01129F
44B2D0DA0A0D4246B40A3567725D92D14A71BEF3D15B0FCD87AFBF51EDF2E434
E7AA8140D4D28AD634F885437601AC91D4765E112CCA291CD10E37C9ADCD0B75
E41F6A87C712119256205A282F77AFDAF9159A199A13D204AE23426594> |-
/nine <1C60D8A8C9B7A73D3B44BE7BB547913A9BDE169CF47BDFB08AECD5607
99E5BC8494BE235E9ADCC03CB80F5292113DF6968D1EA7A40F55C5B9F80DEC1E
C90EFB1C279B74EA768317A0E0EF74EDF4617CB23F4C910337B8288987BD48E8
3A5C57153D99C537E1535151D97A04BE59B429AB8384BD475BB1798042991B18
A318E879D6A9C6C64FA96744223F01926110C9D549A9098592C1B> |-
/A <1C60D8A8C9B08A944AAF3A41AE50384710DF86C86BE2766CF1446A4725D6
14797E14439E776E246B31ACA2732981CBCD5021D679A5247C473DD16A69B54E
FAC72E86C31EB4813A990D17F639CA5A2B4A60C4A18CD2FF46228F08A0BD> |-
/S <1C60D8A8C9B08A95C5897169EED998E3A483411C7A0F3390660D3244B230
926C536826CD5B5B7B2ADAD07DFBA69DDB5E59FEC017BE84EEE8F8A88B3F76D3
141C36DE6F631E2DE0D75823AECC86270AF5782264021D446D7F5C8F80743DE5
586CF952071F10762DE0BE112CC581D3668B9189B8CDCA398FFECC3DCC67A6D4
52B2556D4C19E874DE57221BD15B399E0687FD> |-
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597CB6E5B5727BA22A17D0DAE
C407D8C3D3136AA342232348EF23781510C3E78954963CD307527E6A8156255F
51163D8760FA65EEBAD56EA8F7D2F06154AF2F14F168207F31B23917B20B9FDB
A8E4C1D2E16D03E0C04BF729182FBA85E7EDE81B43C3AA0ECB9C9BA27B0E7F> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8
BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A31
69762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C6662A2D6
C7FC6E088D08DCAF0061583F541694> |-
/i <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A294CE56FA4856D5579
AC24D99BEF447D92E629D8CC408E6D9D7B0F2DD90AECF9> |-
/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1E357CEC11DF3B72C
60D7555125BC3695> |-
/m <1C60D8A8C9B08A947888CD346A212481DC30FBBA5172AB33DA555892BB0D
4457537FDCBE22278A04524382B282B93AE276CEC08E722FA268559910EF4D4B
7BDAD0078C7ABF5DB8F1EE00F47BCD24C7B22C3566337374E8D52DA222B452E3
AA33BC072A7E37009D15AFC4B051AF57> |-
/n <1C60D8A8C9B08A95D5A79985A82729CAE756D0489903E93B90E41EC367F6
1A5B1D9E6565B3F6AD5D7DB5A2C3E43D0E00B470AD40C0D92976A92464A2E599
1D4AD84826F60EFFB914AFB515> |-
/r <1C60D8A8C9B08A959965E2515C2E939D32F95F06D24977D250B5BA06E866
AA828AC35B0DE74E529A185884FE51182FAA624B3FDBC3A7A2C8> |-
/s <1C60D8A8C9B08A95899606B6B06029417B1C57880E6EC5D2D6786BEDA677
1C673DCA1F1E4C0DEF808791979853B096E133BFED7F29CEC7631B543CDA3044
7AA41B7FA0F4C395215EB8E1863D34AE9393B851AFDB1E97EFCAABF875BA3C47
5E5986C14523B69201AE249C951AE0EFA42707CEBD6E1E21237369A79A3BF9EA
ECA687BB513F7892AF8337C0F0> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350F4E0B4C1A851140E
2736CC0BCA482E4D8AAD1BEEFCDDE668980FBCDB1FA095D98D1D1D88986BF245
E52C01B70C1F43F764CB2ADCDFD2E95C5ED85956ABE04B8858> |-
/v <1C60D8A8C9B08A95A8358A0E497F758EA77B0083E13DA0209FC91E76A913
F4514D418F55771FDDC53456160C1DE8D884748B270EAAA99861A2D465DBA4A1
CB768E0ACE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 19 /acute put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 57 /nine put
dup 65 /A put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[19{/.notdef}rp /acute 24{/.notdef}rp /comma /hyphen 2{/.notdef}rp /zero /one 
/two 6{/.notdef}rp /nine 7{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp 
/a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n 3{/.notdef}rp /r /s /t /.notdef /v 137{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
119.972 121.36 mo
(Semestre2,ann\023ee2009-2010)
[4.06258 3.24944 5.80871 3.24944 2.8027 2.64037 2.49857 5.69165 3.65602 4.4662 3.51421 3.77808 
3.57333 .204742 3.24945 5.68436 3.65599 3.65602 3.65602 3.65601 2.43709 3.65602 3.65601 3.65602 
0 ]xsh
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B08A956F7E0F548729E2FA763C265958B9DA7B050
0066C45A87C3F8E15577349AFD033CCE98CCDBF78> |-
/one <1C60D8A8C9B08A95D352586DE3151F1504BF89266AC83A1328ECECBA64
A344731E64412EA8E81B687F45A13EB28BD606168DCE429893D6F9884C6358B3
E87E404A303C20A8DA> |-
/B <1C60D8A8C9B08A945A1AB9ADE1431F2BE33DEB2B07027F8D31B59BE9D5E7
8EFEB2D52569BFC4356EDBE9B81048E925EA1D6720393F215414E436CBE9B76A
A68D71488BC2A7927F7DFA96AB813BD4BB5A5559B50EB874AD7D5AA092A7776C
6BCF1419F48D10811192E01527739F9376A35BE5DFB762F1BA394C> |-
/D <1C60D8A8C9B08A946548FE93FF91E282ED17DEAD31FDE2451ADED7697DC4
55BA37D4A0011E496FB88E2D4E659921E48B691B21676F09C1E48C65F2108F85
426A91C8DCB87E04ADFC5429F8CA89F79B65DC2D687A1A879A> |-
/I <1C60D8A8C9B08A956F7E0F548729919A937A549A13096CE92A95B565EF87
D1085274A9E46F61> |-
/T <1C60D8A8C9B08A9500EA96090FFCE1279362845AF36A891DD30BDCF505C2
B811B8526F864E813AE046EA590E9ECE9CEFE68B52F0C15481EB81B0E4A47954
BAC9FB872865> |-
/U <1C60D8A8C9B08A9452E115893F9BBC126CA6D3D8A2A2E6A6E90377036946
7444797F3054BFD01815A906E52946CF6AAA5CF53FFB9D9CFA10FFA45631D5A4
8F4A7B4C44972EB9B3056E6C56D4C335> |-
/f <1C60D8A8C9B08A95626B58A6B1237965053973B8FB404709A89F375E9156
15E158C393BA01B95E846CF870F30888327DD24AE0FEF9D9DD698B73315409A4
3DA7F58A531667197A4326089196F7D6EBC0991D4E4B4C> |-
/p <1C60D8A8C9B08A95CADB2E0FDF213E194EFE9C5721793A8C4A31F32BF61F
1B061CEDFBA7A2A7F80C89BFF07169513B0D9A5554574E5738F756CD6BE1B124
8A1D06C7A9486EB4790E66CAA5C36015335552CEA014F3B01CB6E7E9390FF90E
30A2EDE296460AB8904D74521BEED3> |-
/q <1C60D8A8C9B08A95CADB2E0FDF213E194EFE9C5721793A8C4A7ECA886C7E
A49D8F15EFC2C48728D54EBB21736441730DFFD5992519AB3166AC886DBD7D45
D1BE0862F1D07E826CA115CBDF0AC0034605824F3D60E40D5A8946B25064FF57
6914C7131DB2D6> |-
/x <1C60D8A8C9B08A95A31DE9FFB66A152398A4480AFC8647F837FC3CE71EF6
79BB97C3A3EEE25F59581EE3667B04DAC39B08A7F49E7AEECBC51D080D3AEB08
2774A078F44F55C301> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 39 /quoteright put
dup 49 /one put
dup 66 /B put
dup 68 /D put
dup 73 /I put
dup 84 /T put
dup 85 /U put
dup 102 /f put
dup 112 /p put
dup 113 /q put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp /hyphen 3{/.notdef}rp 
/one /two 14{/.notdef}rp /A /B /.notdef /D 4{/.notdef}rp 
/I 6{/.notdef}rp /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp 
/i 3{/.notdef}rp /m /n /o /p /q /r 
/s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [5.34211 0 0 -5.34211 0 0 ]msf
132.474 137.336 mo
(D\023epartementd'informatique)
[3.93924 .16185 2.52254 2.93068 2.56638 1.93866 2.04976 2.52252 4.50766 2.52254 2.93066 3.94087 
2.93068 1.57648 1.3542 2.93066 1.73463 2.6833 1.93866 4.50764 2.72665 2.04974 1.3542 2.93066 
2.93069 0 ]xsh
145.83 143.679 mo
(IUTBordeaux1)
[1.57649 3.89548 5.76782 3.78381 2.68332 1.93866 2.93066 2.52254 2.72665 2.93068 4.50656 0 
]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
149.23 160.109 mo
(Avril2010)
[4.87495 3.37161 2.49857 1.74689 4.18181 3.65601 3.65601 3.65602 0 ]xsh
grestore
gsave
325.522 208.019 mo
568.718 208.019 li
568.718 25.6212 li
325.522 25.6212 li
cp
clp
325.522 208.019 mo
568.718 208.019 li
568.718 25.6212 li
325.522 25.6212 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
486.316 205.147 mo
488.587 205.147 li
488.587 203.545 li
486.316 203.545 li
cp
.308354 .28983 0 0 cmyk
@
483.455 205.346 mo
482.114 204.341 li
483.455 203.336 li
.138705 .129152 0 0 cmyk
f
491.498 205.346 mo
492.839 204.341 li
491.498 203.336 li
f
499.986 205.682 mo
502.257 205.682 li
502.257 204.079 li
499.986 204.079 li
cp
500.54 204.073 mo
500.54 203.537 li
502.819 203.537 li
502.819 205.145 li
502.283 205.145 li
501.076 203.537 mo
501.076 203 li
503.355 203 li
503.355 204.609 li
502.819 204.609 li
.308354 .28983 0 0 cmyk
@
497.993 205.346 mo
496.653 204.341 li
497.993 203.336 li
506.036 205.346 mo
507.377 204.341 li
506.036 203.336 li
.138705 .129152 0 0 cmyk
f
.40066 lw
515.882 203.671 mo
517.893 203.671 li
.308354 .28983 0 0 cmyk
@
512.531 205.346 mo
511.19 204.341 li
512.531 203.336 li
520.574 205.346 mo
521.914 204.341 li
520.574 203.336 li
.138705 .129152 0 0 cmyk
f
515.212 203 mo
517.222 203 li
515.882 204.341 mo
517.893 204.341 li
515.212 205.011 mo
517.222 205.011 li
515.882 205.682 mo
517.893 205.682 li
@
529.75 203 mo
531.761 203 li
530.42 203.671 mo
532.431 203.671 li
530.42 204.341 mo
532.431 204.341 li
.308354 .28983 0 0 cmyk
@
527.069 205.346 mo
525.728 204.341 li
527.069 203.336 li
535.112 205.346 mo
536.453 204.341 li
535.112 203.336 li
.138705 .129152 0 0 cmyk
f
529.75 205.011 mo
531.761 205.011 li
530.42 205.682 mo
532.431 205.682 li
@
544.287 203 mo
546.298 203 li
544.958 203.671 mo
546.968 203.671 li
544.958 204.341 mo
546.968 204.341 li
544.287 205.011 mo
546.298 205.011 li
544.958 205.682 mo
546.968 205.682 li
.308354 .28983 0 0 cmyk
@
560.434 204.609 mo
561.506 205.682 li
@
.267102 lw
560.608 204.012 mo
560.608 203.567 560.252 203.211 559.807 203.211 cv
559.362 203.211 559.006 203.567 559.006 204.012 cv
559.006 204.457 559.362 204.813 559.807 204.813 cv
560.252 204.813 560.608 204.457 560.608 204.012 cv
cp
@
1 lc
556.144 205.682 mo
556.869 205.682 557.485 205.078 557.485 204.341 cv
557.485 203.604 556.882 203 556.144 203 cv
555.407 203 554.804 203.604 554.804 204.341 cv
555.608 203.939 mo
554.804 204.609 li
553.999 203.939 li
564.188 205.682 mo
563.45 205.682 562.847 205.078 562.847 204.341 cv
562.847 203.604 563.45 203 564.188 203 cv
564.925 203 565.528 203.604 565.528 204.341 cv
566.332 203.939 mo
565.528 204.609 li
564.724 203.939 li
@
325.522 32.0759 mo
568.718 32.0759 li
568.718 25.6205 li
325.522 25.6205 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
331.221 30.0731 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.7197 1.3338 .121368 1.89191 1.6319 1.89191 2.19803 1.53732 2.04498 1.53732 1.01566 2.12869 
3.61636 2.198 3.61636 1.89191 2.12869 2.19803 1.45398 3.05023 2.83786 2.36511 2.75455 2.12869 
1.41913 2.36511 1.96161 1.6319 1.42111 .117371 1.89194 3.38074 0 ]xsh
325.522 38.5313 mo
568.718 38.5313 li
568.718 32.0759 li
325.522 32.0759 li
cp
.824216 .796414 0 0 cmyk
f
.266767 lw
0 lc
332.691 35.259 mo
332.691 31.9204 li
1 /0 /CSD get_res sepcs
0 sep
@
332.824 35.1256 mo
336.163 35.1256 li
@
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ffi <1C60D8A8C9B08A941FA3D6A452412E4EDABEA7E6130383423DBC00BF22
0C474BDE4F0F4F302102443ABE7B7E73A3C403D4DCECFADD7A33B3805D206DBC
DEC0EFD8E118D6CE68B418F52897DDFC2028A019A9BF4592507DCE4E755D0C60
2A6D95AE48F52915D7513BF6683F3905D8D5730674FEFCAAA9FBABFE94D9BF5E
EE1776481D6D02420BA5DB78EBE6BCEA59680C440FF37046340AEDD3446DD079
705B4D3D67240F> |-
/g <1C60D8A8C9B08A95D352586DE3156F009F9006009F639A8258D634C07A47
28FC89A512B81732DCEC6E9C982BEEAD774A0369723BB6C108357241F27F5FA8
5A7410FE95C47BB0D587F73F0CE300962C85F2CF522AEC6D33B60BDBA1538F1D
02C3AF684A5F56CACB3E4CDB89627AB713B34ED63DA7D77D5FF5C046631112D3
BB1D955DDB2E28B394D3FB493F888A13EC7559B5D2F28EEF4492C4D6B068EA9D
9F4BFCC1277B93AD0C07BF7FC92A8C7BD166D5D34860A47802A212E1590C7BAD
1E3008AE30317DDBBCC90A770C2D7D19CFBC181ADE76DF145BA68F685903> |-
/l <1C60D8A8C9B08A957F18A8F05374566C54B2C94D26200652204839D8E9E4
3E536042EE59181A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 14 /ffi put
dup 103 /g put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[14{/.notdef}rp /ffi 3{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp 
/hyphen 3{/.notdef}rp /one /two 14{/.notdef}rp /A /B /.notdef 
/D 4{/.notdef}rp /I 6{/.notdef}rp /P /.notdef /R /S 
/T /U 11{/.notdef}rp /a /.notdef /c /d /e 
/f /g /.notdef /i 2{/.notdef}rp /l /m /n 
/o /p /q /r /s /t /u 2{/.notdef}rp 
/x /y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
336.831 36.5278 mo
(Programmeo\016ciel)
[2.7197 1.45401 2.12869 2.12866 1.45401 2.04498 3.38077 3.38074 3.31024 2.12869 3.46408 1.89191 
1.01566 1.89191 0 ]xsh
325.522 44.9859 mo
568.718 44.9859 li
568.718 38.5306 li
325.522 38.5306 li
cp
.514061 .481117 0 0 cmyk
f
337.632 41.7144 mo
337.632 38.3757 li
1 /0 /CSD get_res sepcs
0 sep
@
337.765 41.5803 mo
341.104 41.5803 li
@
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B08A947C9C43F8E346BF099737025C59DD2E64D7A40AC79328
8649C12028251B71DA92946E6B2157F73CEAFAA7557B8280E6E8B61ECEE08931
795AA99CF1886B5876BAC28563C6B8FA0F66802FC7CDB70173F0EF0D09F504D2
3C247273879D27A9113954A1AB4C2CCA483203> |-
/b <1C60D8A8C9B08A95CADB2E0FDF2144EBE0376508D811B328E798C0B7D6A6
2A2CDA8F56109845A72D0417B3C820F9A3345793518521B97912C47C871C0603
621FE5A19E9B3F1F73A1A645D83789D69713227A4031BB0DE43D112C6269B740
DBCA1DA4CC848ED976BFD8CAE360C3C81934D5> |-
/j <1C60D8A8C9B08A957214D90CA212DD39AA55FDB6360D875BCFEDC86015CE
B88A7D946703BD4D77A6424CB3107B3FABF6541CA45AEA741420086AC58A8699
48EBA09227FDCDEAC7F2AFE282647DEDEAD78B68CDAC88729D2A2102> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 79 /O put
dup 98 /b put
dup 106 /j put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[14{/.notdef}rp /ffi 3{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp 
/hyphen 3{/.notdef}rp /one /two 14{/.notdef}rp /A /B /.notdef 
/D 4{/.notdef}rp /I 5{/.notdef}rp /O /P /.notdef /R 
/S /T /U 11{/.notdef}rp /a /b /c /d 
/e /f /g /.notdef /i /j /.notdef /l 
/m /n /o /p /q /r /s /t 
/u 2{/.notdef}rp /x /y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
341.772 42.9832 mo
(Objectifsg\023en\023eraux)
[3.14398 2.19803 1.13388 1.89191 1.89191 1.53732 1.01566 1.30096 3.05023 2.01251 .117371 1.89191 
2.07782 .121399 1.89191 1.45398 2.04501 2.198 0 ]xsh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B08A9454CA4C75C5C9800536091BDCEFA1AEF1C5D64D554928
21305B63AAB548C2F8EF11655A5D353D59F73926FAFA7AD9F2EE7E37BB06FBD1
EE0F00323AD3FC7696BE63650FC50687453E50FDF1C797C29778FACAC7CAEA1B
BAB5F60234B9340DF22D7BD2D0F0484665> |-
/b <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05262E3E1978
A9191C949094A8BAB37317B63101C9E897D3EBBB99192DBAD2C5B7A654A40263
23466FE00AE14F7DF513956E5EB4FD1A561BACACD68519F1BC31C92D77CEF42F
1647B9BF99793DB993BF77430E9C2CE12143> |-
/f <1C60D8A8C9B08A9568507F33172027C976C70BDEF1BE12B98D436E88E4CF
067376F3D3DDD6A12CC0981498658EF8FB773D0190CE565ADC91D806D8C98EBB
4048EB48BC67B6B6485A5D904BD8B8BE3D8C195268C8> |-
/j <1C60D8A8C9B08A9578EE71028359B184F69A8090E513989191F8F6E92611
F13676A50E7CDF1F468902B7BEB9BD62BAC63BBAB524753C182EB9D56B9AAE16
86E1F627D035EDC7897F0B4299FE5A57AB45> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 79 /O put
dup 98 /b put
dup 102 /f put
dup 106 /j put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 25{/.notdef}rp /hyphen 4{/.notdef}rp /two 14{/.notdef}rp 
/A 13{/.notdef}rp /O /P /.notdef /R /S 13{/.notdef}rp 
/a /b /c /d /e /f 2{/.notdef}rp /i 
/j 2{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
331.221 59.0998 mo
(ObjectifsducoursASR2-syst\022eme)
[6.94452 4.83008 2.47614 4.18475 4.18475 3.40024 2.21454 2.87698 6.74362 4.83005 7.97443 4.18478 
4.70782 4.83008 3.20007 6.74362 6.22147 5.23105 6.05991 4.70786 3.13861 3.60886 4.30698 3.60886 
3.14059 .26535 4.18475 7.44559 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B08A9570810981675968D99ED2FBF9309D0880A1DEC095
34BAE0FC1CD5F2356EA02911685C21B0B3EF6576> |-
/E <1C60D8A8C9B08A95F50B1739DB3597D285FCEA4B0869AB5A3F34412C816E
F5670553D0830A356BB3DBA1147151DFF348A03547A198B7E361C103459B1DE8
DDCC1385C818BC5B4336FF4443B097740A8C1EAFD1D15E> |-
/N <1C60D8A8C9B08A945A1AB9ADE1431F4D4C706440445EB3B0AC42C017E667
E3B1F1AC20498D10D59C4B84EF905C8E5EA3C5C9A989C1FC16849E408F5E2AC8
F9219876B942B12D4274D9639C64DF3A8DD0> |-
/P <1C60D8A8C9B08A95E5CBCB515510A1DB766E66BB68264ABF90DD718217D9
B36182A2F041C72BEB1A0004579EE3860968B0F631081AB288C0DEE8D6338BB7
6DA4D5B22D81C2C6CE553DCC530034E4302890BB1BA61F50A5> |-
/d <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091AF2A64FDF58
3D2492D2B07E549E6F0F191740B84475A05D8CB502D6FFA02A5BDBC262D7461F
84CEFB949AA32E310EECB077C8C7052B181BF14CE47E6F9404B3FEBC4A576FA9
7D4D209BDF970697D6703F5C6BF334F97BF1> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A02D998439C3D8F5943D44B24
05B880A2E47A3923B4151C5A4934C03CC4787600BB3DBF41B100327D7717400B
228ACD479E7A669CC2CAE88F> |-
/x <1C60D8A8C9B08A95A8358A0E497F758EA77B0083E12FF62B0B183E9C6091
E75C18242A21A8B03EB434CE290FB8D772E4B24C9F5C59F065DEC938494B56AF
92BC2EE7C0A5DA1FEC3A6BE5D0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 58 /colon put
dup 69 /E put
dup 78 /N put
dup 80 /P put
dup 100 /d put
dup 117 /u put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[19{/.notdef}rp /acute 24{/.notdef}rp /comma /hyphen 2{/.notdef}rp /zero /one 
/two 6{/.notdef}rp /nine /colon 6{/.notdef}rp /A 3{/.notdef}rp /E 
8{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 13{/.notdef}rp /a 
2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n 3{/.notdef}rp /r /s /t /u /v /.notdef 
/x 135{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
344.521 95.9116 mo
(ExtraitsduPPN:)
[4.36673 3.37161 2.64038 2.49857 3.51419 1.74692 2.64035 5.23761 3.77808 6.22031 4.67166 4.67166 
7.61398 0 ]xsh
352.24 106.997 mo
355.489 106.997 li
355.489 103.747 li
352.24 103.747 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/grave <1C60D8A8C9B7A73DB619E39FEF98FA771CE17F72D5A1CE3397B17282
2B8900257717E7FE> |-
/quoteright <1C60D8A8C9B08A957081098167591B8ADA9FDB96A1436396F7F
788EF4868A705369888EA4FC556D95DFAE0F72074> |-
/period <1C60D8A8C9B08A9570810981675968D99EC91A4FB3FF0912F3FF225
19AEBE50A> |-
/circumflex <1C60D8A8C9B7A73DB619E39FEFB0774FF66039D3CF3621E3408
F6E29D19B10FCE81CC60A9201072ADD02CDA2319E1B85> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D45BA2821B5F2C4FA9D3A85E224B022
8E5FE35AB726CC4A33D25588EC7C48DA589632E55C3DF3C711B3593039ACD915
ABCF7631DC124554B002B7F4444201B431DF315B197FE5799F7C> |-
/h <1C60D8A8C9B08A95D5A79985A82729CAE756D04899265F929F8923BB7F66
0F8BA9AE60D5A68E190A1C2D331328AC43A0120F78B2E91DADC6910D7E5CDF89
D74BBBD78E503590AE48EFA32DF8171C17BE> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C224947145FF19D1
982913BDB63436AA6C4E83643807117E1530260A08A6B9A3F353> |-
/p <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F170BA20A3467
B97387D8D8E2E47D725A77E3D89E610463BEB33F2000963437F3E1548999C4C0
D771AEADC64008A4018EB255F27E32C5AC3E27C9FE47F18E6F6006D8F9D35D48
3D63730ACC150C4935A22C3C9F17D6> |-
/q <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F1779F7EEF73D
B4C69DC4A750C7A5FF66E5A9D159C42737F792DA6713542A7A45B37981F06555
9F1C88AFFC5E12568F048551E9BA933FF3994169ADDC8D6CA17C2978F26F1B06
DAA5D1F16677DDB46B661386765B> |-
/y <1C60D8A8C9B08A95A8358A0E497F05BF5F726C557A2E2829313B836F25DB
5900E849559FDA967A2F65CB8602740FE08056FF8447EF879526A4DF9E08F0AC
AB853F0CC97F5F0A2389709E18B6B2DF1BC7478B686DDE603D07DF69E90921F3
CB21E43826> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 18 /grave put
dup 39 /quoteright put
dup 46 /period put
dup 94 /circumflex put
dup 99 /c put
dup 104 /h put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 4{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two 6{/.notdef}rp /nine /colon 
6{/.notdef}rp /A 3{/.notdef}rp /E 8{/.notdef}rp /N /.notdef /P 
2{/.notdef}rp /S 10{/.notdef}rp /circumflex 2{/.notdef}rp /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 106.997 mo
(Pourlessyst\022emesd'exploitation:une)
[4.46692 3.65601 3.77808 4.93347 1.74689 3.24945 5.24493 2.8027 3.37161 2.8027 2.43564 .204742 
3.24942 5.80872 3.24945 5.23761 3.77808 2.03128 3.24945 3.37161 3.77808 1.74689 3.65604 1.74689 
2.64035 3.51422 2.64035 1.74692 3.65601 6.22028 4.46622 3.77808 3.77808 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXF+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/grave <1C60D8A8C9B795A0BE0D54062F115F6CE16FA8E8EEA4CD8BA0615BF1
835FDBA350F8D8BFFD8C91743EC7223686D2451BFC78F92D9B579482682A34DA
046EF4EDF8E167B35CC51CD21E> |-
/quoteright <1C60D8A8C9B08A956BA65798425C9A3B08F57E3592A0F2C8CAC
01C10EB27FCAF6B148C187640E6FA8D0AEA3B19F1FAD9A58D55B34974A299E34
DAA1573ABB7BAA451EEFB48ED1E8676D6DD18706130> |-
/a <1C60D8A8C9B78E05922DFD3AE291311EDDA978D554F833EEF8F0AA38DBEB
DD2326AC4D55C915CC4853AB84A252602DE5ACB2665E160DD4BB46E9D53F2A68
651B0C69DBF0732FE864448E65EB2681EABE008B59298BC974F7827B008BDB4F
25502248403B4385866E6A60C4677AF7C7EBD2C241081B3007E2FA1E8723AC23
49CB5A58C2CCAEA20DF8EDDBF41CA7FF22> |-
/b <1C60D8A8C9B08A95C7058C097FD3B6E7932C79D7495CF5EF8F4098B68A96
659D97671B19AB78EE84B6E1CC6AA00CE6758FCCC91E73ADCD445E0D74276012
D61D30B7AC82A81F83163A105937E7191F33E55314DB68E615786F28DF25EEDD
26D3186126E9E34FA33C3AF9118FDCE9A18D790C9102B8502C559962052A4686
25> |-
/c <1C60D8A8C9B08A95A2AD66FCFE454406FC720613C2B4294AE105526D7C4C
66EA0B253B68CFE73D916C6DF6314C87AC3FD930D32123B5D2F4B143DA579014
8BCCC88A4C2E8CF5221B28EEA51FB55B4F46617E244EA9A3E6E7B2B2402FF081
7D7DC3F40186A00D0F50A475F2005CCFA6C0523B881ED33E360B68E75879887A
5A6269922D62B86DEB3FE1> |-
/d <1C60D8A8C9B08A95C7058C097FD3B6E7932C79D7495CF5EF8F380B39CFBC
D01269807B521761BCDB37EAA77DABF150E3F55D41E10DB4B46A473A4731E17C
A8646FAAFAEA1A42E9ED669DEFCA0E6C97E6FC990DEB46684512A4A374F946D6
F17FCA93CD197B7B9B80F8FD4CB2C070BECA806651364D8C9820C4E95A275C23
9A7CD9E4871F94> |-
/e <1C60D8A8C9B08A95DBED6976208F659A3E6571462EA7DFE2E6C45A85CDE8
FABD19D86DE113F86B8FA5225FA4236CAA6D064E369FC78BB657BEB210B25C0D
7CA1E4550578A2105F0FB8CC66E067D31CF7DD1A542446AB94BFADC98CEA38D1
0F2253D57A40E60787F5C5A915882CC7589EC23527EC2069F4493522732852D0
5B1CE34FC616CF2DCD> |-
/i <1C60D8A8C9B08A957FCF380241A38F5ED4C1047F636891D372E49F42FB66
11FFB357B1426787C9C21BBCEBB3C1A39A90F9D1C075BCA2F0F949F90340F8C6
B7AAB565B991EB686D3C8A2561AF6814529128C5E0C3031B2B249487FB69> |-
/l <1C60D8A8C9B08A957FCF380241A38F5ED4C049768305D6C873CCA31E775F
661DDD244D5076A1A5E22E1BA908054B23B01E83E16EE4DDEE516E9A3B> |-
/m <1C60D8A8C9B08A941C278267924688B37B21356E74BF369E5CCAD863F75A
E8A33100769446EE826C56CF47C5199CBBD47A8AA9FAB1C9A048FD6983BDF365
1C827B801D45714DECEA76E6141F22DA17B22B40B4EF3F9AE40A4F5D0078BE8C
058CBB4452653C48F620D283AEEC5B5FB6D02E265ACBFD5A4A20F5178BC06BB9
2D2D0A9DDFF640A14E729D062509694D592FFB1F1C06942B4C61341F90E324B1
1935F0> |-
/n <1C60D8A8C9B08A95C7058C097FD3BD79193C2D878BD45F49BB00D5FCE2F0
0D50A7CD8783EB5751B2C46B2ECC1577666F4852D3DF07742E14A32E765F78D0
936CEB99A02FA1B06864FA158B268114A811B7FA0BC14EF8500354FBB13F51EE
D42E32F96254CB2D8079C98213C5> |-
/o <1C60D8A8C9B795A0C6CA2FEE45CC0BDF284E9A10EF994540F43E7FE6C18A
73ADB6D1DBAEA1432EBE4B5650DEA98F6797CE2CD6C16CA6486493C77240BDB9
0EF8299E735FF86F1EDF0C5FF78B10C9F618CA6DB575D2C97C> |-
/p <1C60D8A8C9B08A95C7058C097FD3CD9681E8CAED12DADA32017F73A1E136
032EF6C42F0DA955EFF37206E5C8626F9F8C16BD8F81642686771B129656B787
7E29C80E8698C448397F61E7CFA9E0A69B14EDEEEBC88C11602423BEC014851E
3CD758E7028A35CD70964BD05E61D8E1FFF149131DAEC300EBFDD23F94BF5316
26CB2DAB9F46D8> |-
/r <1C60D8A8C9B08A958D03250E1B7A39D0353106D539BBB845C3EA4779DD6B
0E3160B5FE8322F78863A882687514C07CDDF5EA145DDB3430BDE7C227FC4702
90B28154F63D26F5A1CD0F3121C321DB9EABB9C234BD96424F8506228E4E> |-
/s <1C60D8A8C9B08A95B8A6C654A81733ADCBCFB78DCDD4CF4CCEFF50705320
0BBFDC3EB0F481DC3F314366DC1C883C78DA97B0D4848BC640E98A4F64EDBA14
A2C527447D9610EEE03D765559EA497B93568C05536B6080D24EF41EE3237AFE
193B84C5E9DF0CB65DA68F53DD072EC03E82E97B336B9F811E45EB6F381DCC5B
DC659950189933405EF4ECDFC9636A4EBB72AB8268F8AC6B05A78B8C20BCA586
61F7D23D0F8FAE192395CF07594672867239EAE510934B36956AB3> |-
/t <1C60D8A8C9B08A9581590979E089BC6D3A5DF11A61FA58870C9F0EB9946C
BA7EF9291DAF8AFDFA9354841F7C677E4BCBC2E7D0FB47AACCA33180A19362CB
60DDC9E11DE5829744528E180DF1BE2D15330C4EB01264192FB85F54F6244919
6E27115A1368B3B2050A6B68FC67B221810EF304AA774DB4C0A627189040C635
7DEEF985D243C8AEF0> |-
/u <1C60D8A8C9B08A95C7058C097FD3B6FC80D41F2E8E07B0E07ABD75D5C627
BE441C19F0382E08E4115AF874A14ECF10DB7679AD32EAC97869A255226CD21D
F392E87AC9ED1546D486FF5B062443768961CC451FD2E241485E22B1732ADF5E
21FC6C19A76C7B5343E3797D> |-
/v <1C60D8A8C9B7A73DC573E0F2B44234B03C08BC27F5F91A9159C0B9CAFB9F
425FD1E79E1E1B25EE2DC580934E98C1ADA0E992923AD1001B6AC0C74A4D4C2D
8FA303C5B5F34BC3C5D1CFABA9C8F04115CC192981216D1DF24835BF64B41706
FCDE38> |-
/x <1C60D8A8C9B7A73DC573E0F2B44234B6633A0180BFD84436F1435F5D6A50
AABCF342B0EA90069F4D652D0BC42A14F96CA76D51C978050B68D3BEA345FB5D
19C3923431FB35815B7DFD2842C7B2F479872B1086692D0E1D85C8BFCA71949F
42A85431C570A2F29D98F24712FDC8DB3E295F01F578A4C3EFAE32814EB56C6F
80472A5C70C61458E2A58C2AAA4AD478B17DD831EE46D937> |-
/y <1C60D8A8C9B7A73DB58DD2A2BB19D5ED459E184BF518B1B202713E4A7F45
17C5041F58AC7F597662953CF5DBA74CB9254383123DA72347E57B8858893B9B
0A05E5B258E42F526B5008EB142E2D9855282CE546A7A27B694BAE3D48475652
02B21C5DEE93AEE9ABFC0B28E966C5504D6B0F997778ECD33FA7816F9E329E46
801FBC3BECCE75E9D6A63D6599CC9C01598D1EA0B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXF+CMSSBX10 /Encoding get
dup 18 /grave put
dup 39 /quoteright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10*1 
[18{/.notdef}rp /grave 20{/.notdef}rp /quoteright 57{/.notdef}rp /a /b /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/.notdef /x /y 134{/.notdef}rp]
JRFCXF+CMSSBX10 nf
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
476.869 106.997 mo
(bonneconnaissance)
[4.32944 4.02164 4.10275 4.10275 6.41333 3.57489 4.02164 4.10275 4.10275 3.83875 1.86896 3.08356 
3.0835 3.83881 4.10272 3.57495 0 ]xsh
359.146 116.078 mo
(dessyst\022emesd'exploitation)
[4.10275 3.73712 5.76706 3.08353 3.65601 3.08356 2.8093 .146271 3.73712 6.33734 3.73712 5.75974 
4.10275 2.23459 3.73712 3.65604 4.10275 1.86893 4.02164 1.86896 2.95557 3.83878 2.95557 1.86896 
4.02164 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
452.876 116.078 mo
(multit^aches,multi-utilisateurs)
[5.80872 3.77805 1.74692 2.64035 1.74692 2.56723 .0731201 3.51422 3.24942 3.77808 3.24945 2.8027 
4.46622 5.80869 3.77808 1.74689 2.64038 1.74689 2.4371 3.77808 2.64032 1.74695 1.74689 1.74689 
2.80267 3.51422 2.64038 3.24945 3.77808 2.49854 0 ]xsh
359.146 125.16 mo
(tantauniveaudel')
[2.64035 3.51422 3.77808 5.07526 3.51422 6.22028 3.77078 1.74689 3.37161 3.25677 3.50687 6.22031 
3.77808 5.68436 1.74689 0 ]xsh
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
419.003 125.16 mo
(utilisation)
[4.10275 2.95557 1.86896 1.86896 1.86896 3.08353 3.83878 2.95557 1.86896 4.02164 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
453.974 125.16 mo
(qu'auniveaudela)
[3.77808 3.77808 2.03128 3.51422 6.21298 3.77808 1.74689 3.37161 3.24945 3.51422 6.21295 3.77808 
5.69168 1.74689 0 ]xsh
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
512.329 125.16 mo
(structure)
[3.08356 2.95557 2.7215 4.10272 3.57489 2.95557 4.10272 2.7215 0 ]xsh
359.146 134.242 mo
(interne)
[1.86896 4.10275 2.95554 3.73715 2.72147 4.10275 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
384.809 134.242 mo
(etdela)
[3.24945 5.07526 3.77808 5.69168 1.74689 0 ]xsh
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
410.299 134.242 mo
(miseenoeuvre)
[6.33734 1.86893 3.08356 6.42065 3.73712 6.77893 4.24832 3.73712 4.10275 3.65604 2.72147 0 
]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
460.728 134.242 mo
(.)sh
352.24 145.327 mo
355.489 145.327 li
355.489 142.077 li
352.24 142.077 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B08A956BA65798425CE9BAB660BE0333F0C383EFD1A8DC8672
6AD58353FF3E06EC019FC152878FA43F42A0AB8BF17B2829C797A765CD324AF1
4A81F113C04B27DD0D55F1868E3A74F6D8403D87B03D56> |-
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838869C792E77FEDB
2EDDDF87A4ECEA55DED30419BE80B9800A7A7BCC852BBF2F2E06BC58F5220971
E571F38CF807ABB277789A55600204E7D4F9D5B79E85F55DBE49717A60C2DBDE
EFC117FFEA09FDB25E08EC0D2C46945DC382E7BB216BC1ED46A53D7DCC40B2C9
9BE8374E106F137F672ABF5E8DC549748A999EC7C6BF9EB4A8ACFE131064AD2B
C89A39B533BAC508010480088F92C9E199DE77B0D5D956B2F9890F91DB699D5B
FE37A68F78A04CA9D3C85DA607FEC9886BB4D6> |-
/j <1C60D8A8C9B08A957417387AF5480D5B9450F79D009EAD18A7A9E5C94773
394E497D0289260C9737ED2D8C1A06A03928437A9397F95AB22C1900113879FF
71CF450E25E98240525D0644BF1632372B2BF1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 102 /f put
dup 103 /g put
dup 106 /j put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 4{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two 6{/.notdef}rp /nine /colon 
6{/.notdef}rp /A 3{/.notdef}rp /E 8{/.notdef}rp /N /.notdef /P 
2{/.notdef}rp /S 10{/.notdef}rp /circumflex 2{/.notdef}rp /a /.notdef /c 
/d /e /f /g /h /i /j /.notdef 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 145.327 mo
(Enpartantdufaitqu'unemachinen'estpratiquementplus)
[4.36673 6.21298 3.77808 3.30948 2.49854 2.64038 3.51422 3.77808 5.08258 3.77808 6.21298 2.23456 
3.51422 1.74689 5.07529 3.77808 3.77808 2.03128 3.77808 3.77808 5.68436 5.80869 3.51422 3.24945 
3.77808 1.74689 3.77808 5.69165 3.77808 2.03128 3.24945 2.8027 5.07529 3.57333 2.49857 3.51419 
2.64038 1.74689 3.77808 3.77808 3.24945 5.80869 3.24945 3.77808 5.08258 3.77808 1.74689 3.77808 
0 ]xsh
359.146 154.408 mo
(jamaisisol\023ee,lesenseignementsmontrentaussiles)
[1.95007 3.51419 5.80872 3.51419 1.74689 5.23761 1.74692 2.8027 3.65601 1.54218 .204712 3.24945 
3.24945 4.47351 1.74689 3.24945 5.23761 3.24945 3.77808 2.8027 3.24945 1.74689 3.65601 3.77808 
3.24945 5.80869 3.24945 3.77808 2.64038 5.2449 5.80869 3.65604 3.77808 2.64035 2.49857 3.24945 
3.77808 5.07529 3.51419 3.77808 2.8027 2.8027 4.18179 1.74692 3.24945 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXF+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/acute <1C60D8A8C9B795A0BE0D54062F115F6CF10C5F5D7033A75A578D1490
CF01696622F86677D75D0D216EEEC1F809112274FB1B5E6345A2B0D5E6D7BE09
6E0B64E5767463> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXF+CMSSBX10 /Encoding get
dup 19 /acute put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 57{/.notdef}rp /a /b 
/c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXF+CMSSBX10 nf
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
516.11 154.408 mo
(liensavec)
[1.86896 1.86896 3.73712 4.10278 5.76703 3.83875 3.65607 3.73712 0 ]xsh
359.146 163.489 mo
(lesr\023eseaux)
[1.86896 3.73712 5.76706 2.57523 .146271 3.73712 3.08356 3.73712 3.83878 4.10275 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
395.393 163.489 mo
(.)sh
grestore
gsave
43.2815 394.139 mo
286.478 394.139 li
286.478 211.741 li
43.2815 211.741 li
cp
clp
43.2815 394.139 mo
286.478 394.139 li
286.478 211.741 li
43.2815 211.741 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
204.076 391.267 mo
206.347 391.267 li
206.347 389.665 li
204.076 389.665 li
cp
.308354 .28983 0 0 cmyk
@
201.215 391.466 mo
199.874 390.461 li
201.215 389.456 li
.138705 .129152 0 0 cmyk
f
209.258 391.466 mo
210.599 390.461 li
209.258 389.456 li
f
217.746 391.802 mo
220.017 391.802 li
220.017 390.199 li
217.746 390.199 li
cp
218.3 390.193 mo
218.3 389.657 li
220.579 389.657 li
220.579 391.265 li
220.043 391.265 li
218.836 389.657 mo
218.836 389.12 li
221.115 389.12 li
221.115 390.729 li
220.579 390.729 li
.308354 .28983 0 0 cmyk
@
215.753 391.466 mo
214.413 390.461 li
215.753 389.456 li
223.796 391.466 mo
225.137 390.461 li
223.796 389.456 li
.138705 .129152 0 0 cmyk
f
.40066 lw
233.642 389.791 mo
235.653 389.791 li
.308354 .28983 0 0 cmyk
@
230.291 391.466 mo
228.95 390.461 li
230.291 389.456 li
238.334 391.466 mo
239.674 390.461 li
238.334 389.456 li
.138705 .129152 0 0 cmyk
f
232.972 389.12 mo
234.982 389.12 li
233.642 390.461 mo
235.653 390.461 li
232.972 391.131 mo
234.982 391.131 li
233.642 391.802 mo
235.653 391.802 li
@
247.51 389.12 mo
249.521 389.12 li
248.18 389.791 mo
250.191 389.791 li
248.18 390.461 mo
250.191 390.461 li
.308354 .28983 0 0 cmyk
@
244.829 391.466 mo
243.488 390.461 li
244.829 389.456 li
252.872 391.466 mo
254.213 390.461 li
252.872 389.456 li
.138705 .129152 0 0 cmyk
f
247.51 391.131 mo
249.521 391.131 li
248.18 391.802 mo
250.191 391.802 li
@
262.047 389.12 mo
264.058 389.12 li
262.717 389.791 mo
264.728 389.791 li
262.717 390.461 mo
264.728 390.461 li
262.047 391.131 mo
264.058 391.131 li
262.717 391.802 mo
264.728 391.802 li
.308354 .28983 0 0 cmyk
@
278.194 390.729 mo
279.266 391.802 li
@
.267102 lw
278.368 390.132 mo
278.368 389.687 278.012 389.331 277.567 389.331 cv
277.122 389.331 276.766 389.687 276.766 390.132 cv
276.766 390.577 277.122 390.933 277.567 390.933 cv
278.012 390.933 278.368 390.577 278.368 390.132 cv
cp
@
1 lc
273.904 391.802 mo
274.629 391.802 275.245 391.198 275.245 390.461 cv
275.245 389.724 274.642 389.12 273.904 389.12 cv
273.167 389.12 272.564 389.724 272.564 390.461 cv
273.368 390.059 mo
272.564 390.729 li
271.759 390.059 li
281.948 391.802 mo
281.21 391.802 280.607 391.198 280.607 390.461 cv
280.607 389.724 281.21 389.12 281.948 389.12 cv
282.685 389.12 283.288 389.724 283.288 390.461 cv
284.092 390.059 mo
283.288 390.729 li
282.484 390.059 li
@
43.2815 218.196 mo
286.478 218.196 li
286.478 211.741 li
43.2815 211.741 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
48.9815 216.193 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.71969 1.3338 .12138 1.89191 1.6319 1.89191 2.19802 1.53732 2.04499 1.53732 1.01565 2.12869 
3.61635 2.19802 3.61636 1.89191 2.12869 2.19802 1.45399 3.05024 2.83786 2.3651 2.75454 2.12868 
1.41915 2.3651 1.9616 1.6319 1.42113 .117378 1.89191 3.38076 0 ]xsh
43.2815 224.651 mo
286.478 224.651 li
286.478 218.196 li
43.2815 218.196 li
cp
.824216 .796414 0 0 cmyk
f
.266767 lw
0 lc
50.4507 221.379 mo
50.4507 218.04 li
1 /0 /CSD get_res sepcs
0 sep
@
50.5841 221.246 mo
53.9227 221.246 li
@
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
54.5909 222.648 mo
(Programmeo\016ciel)
[2.71969 1.45399 2.12869 2.12869 1.45399 2.045 3.38075 3.38075 3.31024 2.12869 3.46408 1.89191 
1.01565 1.89191 0 ]xsh
43.2815 231.106 mo
286.478 231.106 li
286.478 224.651 li
43.2815 224.651 li
cp
.514061 .481117 0 0 cmyk
f
55.3919 227.834 mo
55.3919 224.496 li
1 /0 /CSD get_res sepcs
0 sep
@
55.5253 227.7 mo
58.8639 227.7 li
@
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B08A95D352586DE3151F7F7F9200DA38B821FE049B6D8BC
B649F1FF31891BD1479FC38664BED9DC5ED5BA6B037CD7D25BC87E5A78EAA9C2
A0CA9F82511446CB870D324872BC98A8298213A> |-
/C <1C60D8A8C9B08A94477239F1F27318AA105E20D30BA187A0E862CBD656B7
956951B0DBE674034CE3835FACBA0A9C8AB99404F91F0EA3ABB1090546BCF9AB
5CF5FEE72E2EB7C6AB24F8A3CB8062472F57D4C5AE7D1AD008922FF72C144A53
F1B9> |-
/F <1C60D8A8C9B08A95F15AADD0DE53413AF911996417D78D310696D0E4D14E
050A9EE2340F424ADEE8BDC140E3EC9BB6E733477CF5B7888C0EFD96D89AFE5F
F5124733B67C9B> |-
/N <1C60D8A8C9B6E3FA234D59C72F3EB09552B48FB76399C129327E0CF26C53
F7C8214B02BC2400794EF313217C9F09608513B38E8982784D688291AC00> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 52 /four put
dup 67 /C put
dup 70 /F put
dup 78 /N put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[14{/.notdef}rp /ffi 3{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp 
/hyphen 3{/.notdef}rp /one /two /.notdef /four 12{/.notdef}rp /A 
/B /C /D /.notdef /F 2{/.notdef}rp /I 4{/.notdef}rp 
/N /O /P /.notdef /R /S /T /U 
11{/.notdef}rp /a /b /c /d /e /f /g 
/.notdef /i /j /.notdef /l /m /n /o 
/p /q /r /s /t /u 2{/.notdef}rp /x 
/y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
59.5322 229.103 mo
(Objectifsdel'UFTC-INFO-ASR4)
[3.14397 2.19801 1.13389 1.89191 1.89191 1.53732 1.01566 1.30096 3.05024 2.19801 3.31025 1.01566 
1.18237 2.92162 3.85677 2.90755 2.7197 1.41914 1.18237 3.00494 2.31424 3.14397 1.41915 2.83786 
2.3651 2.75454 0 ]xsh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B08A9576E61A96850671C9BBE427B69CA6B12350C
E7B9E3280474A1FEFD70DA6136EC49A68B85EF44F> |-
/l <1C60D8A8C9B08A9545AEAF563F384DC2228E48A5DE8F50618834EC6A9283
370543991AB61F41> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 39 /quoteright put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp /hyphen 4{/.notdef}rp 
/two 14{/.notdef}rp /A 13{/.notdef}rp /O /P /.notdef /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
2{/.notdef}rp /i /j /.notdef /l /m /n /o 
2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
48.9815 245.22 mo
(Objectifsdel'unit\023edeformation)
[6.94452 4.83006 2.47614 4.18476 4.18476 3.40022 2.21453 2.877 6.74361 4.83006 7.32913 2.21453 
2.61553 4.83006 4.83006 2.21452 3.14059 .255722 7.32913 4.83006 7.31952 2.87698 4.44821 3.20009 
7.44559 4.50699 3.40021 2.21454 4.70784 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A88FF0A3D8
D9739C79CD8FEDDEB9EF209FC269D6334213691C39F989AE55C33109BB139AF8
D0F2255C93F02EDF6C44126695870CBBF70966F502E9A2F646BC7FF0> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207EC0
7DE01D2D6D0C1F139C5F8402C4465ED0D67A37E4EDAB90C2CD0E78D6AB3D4D0C
1EE9207C272D3BF7D46E1FA3FD26AD592C5A1DEB2B642E639B04641EA21> |-
/four <1C60D8A8C9B7A73DC573E0FDE3AD73FEE82F9F14DB3F0AB3BE38D56A8
122A7A5F8B6ED2296ABF48856509B4E6DEF566772A914D1A13C3C012A3EDA96B
E7B991608A6C22F61F497C6E362> |-
/C <1C60D8A8C9B08A95E5CBCB5155105F8988F9AFEF72D4ED646885BB7DE8C7
E8C204EF39896CAEAE260120B824957C86C847669EFAAFA89587DF4162B146D0
F0043DBAB0058C4DE87E670378F0402E39E25B24B07EFD192C0AC2CE9661ACF7
17A6> |-
/D <1C60D8A8C9B08A9454CA4C75C5C97DA70820E758D9EC7227D310C19BB273
22DE84D89496D15A44ABC938EB4A523B8A7FBCC0A43AAA03C94C31F6A796EC61
B43772038C36D19988F6401B84C448C8A0DCADD6823581B6> |-
/F <1C60D8A8C9B08A95C25148D4A67F951EBD6EF3AD9462C395D44288F6CB81
F376CF5EDFD5430607513999D2146E1C667F83F8118977160401906D0121BE0C
CF839AAEF40A80> |-
/I <1C60D8A8C9B08A9570810981675968A74FB02CB1E4D0254CE742213CB9B9
EBFAAD12A2DAE953> |-
/O <1C60D8A8C9B08A9451E2C198C46C0EFB0573D159A5AF5D81E655B9B6915A
702E5496E280AE09150FB0678C66C4D9772F910E900EEFA99579866481186927
2438138CE10E30FFA805A763E75C932A4009DFB6EF1B981427B70BDD87A13DC7
671773A531BCAC929694074676A867228B> |-
/R <1C60D8A8C9B08A95E015B163861C24DA33073F0BDB09DA51CF40C05D5B87
C05EDF86D34E65C779063BDDCAB6BF4F63CC3E6D11D647AEBC7C9645B0B09E04
8FA42FE8B029B8224C09270FDEB45DD990D7B6CB098EC48E8A1D5CE64DE60352
996DD72D> |-
/T <1C60D8A8C9B08A94478101EE5603CAF315CBAC0B90AC512307A4563E44C8
1F696404737A0561325213774D7BE31FD4E1A37D8B8C0A80D54181862337CD6E
7F6232B0033F> |-
/U <1C60D8A8C9B08A9506528433F82FAC2304BFD2BCCB99D47F69544BF8A957
C21A2317E91E8C7A9011FFF40EF18B8316A7DF975CF72D2EFAF2E7A3D8D76011
1E38892D8778E05C130530098E07E915> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 52 /four put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 79 /O put
dup 82 /R put
dup 84 /T put
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp 
/comma /hyphen /period /.notdef /zero /one /two /.notdef 
/four 4{/.notdef}rp /nine /colon 6{/.notdef}rp /A /.notdef /C 
/D /E /F 2{/.notdef}rp /I 4{/.notdef}rp /N /O 
/P /.notdef /R /S /T /U 8{/.notdef}rp /circumflex 
2{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i /j /.notdef /l /m /n /o 
/p /q /r /s /t /u /v /.notdef 
/x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
62.2809 268.585 mo
(Dansle)
[5.28074 3.51421 3.77808 5.23761 1.74689 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: UGKAAA+CMSSI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXG+CMSSI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/acute <1C60D8A8C9B7A73DB619E39FEF98FA7735EE5FE2A11FBD39DB0F0E43
5749D72DC6C0083C94> |-
/P <1C60D8A8C9B08A95E5CBCB515510A1DB766E66BB68264ABF90CE8DD46022
095850AF90C9EB21CBB217CD5EE7A7991AB42FB9D2BADF69C58DD9076A84EAEC
71AAFAD8657AE9E88FC864292828BCE8BB3E00B3C561BF2FE5> |-
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597B680844748EDC47F5C5010
C50922BC8BC23B6DC423981E98BE63D16316537D490A2F9384EF7E881F3A49C0
9B5702320E87E96255132B024D72475B04045835B4AFD65201AA338F887575C9
788392A90F343319E4A4444F2BFD75DBB3220DBB21C1842AD567FD59D8E1B20D
BC9CD321163A57E1591CEBDD43D99825D1B43CDD> |-
/d <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091A8A787965CB
2169278D056D1C5E72497AB36798E12D10BA89DF3CFCE405FC820ABF9AB3082E
E9E05213A8436FD065FCA9AE6F669261D7484D1B63D82E4D9E7B210A80640C66
C1E81907C2BE4B352FA1E37490EE474BFF> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B706B38FDB5
15A588A68A8215065E392EF58B492C66642EC768704B3BF0D343E1959155DB1B
883B82482D4B02780EC6EB6662FDF596BD26BA5BBD949B4DCB8C67DF7A011E54
141AE2E92F8154316F120D183CDBD41BE4F100B1EE035DF34342457D5D> |-
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838D9E9A2FF7E119C
966B0CB98C12416031919B4A8EFFA99027E21B7DA2ABDF4EB695F166BB9012A6
1861AB8F216F6D5328904F1CA1FF0209ACC21BCD1E2DD88517CD9CFB537ABEF3
C2E849966BAA29A05D165DC4C1A098E1EE7A8775E7DAB4D2F4C1DB8568EBF624
B380E7F9DC65F3515485F2C12A6D0672C8C80327E5AE9B2C337AF1ED38937229
2579DDD042CBA34BA49451000277D6C23FA39AD1791C38B790300A7D98AB857D
5CDFBBA8A47DB1CC9BA13B9477BA614D673842440585C7B184BFF237EA5C03C9
34> |-
/i <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A294CE56FA4A418C91A
2A70DEB42511094ABAA387D4EFE2D38DA967504CC16D30BE9A5EEA> |-
/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1C2CBD8D1302DDCD6
559FCF71B0B0894B21E088> |-
/m <1C60D8A8C9B08A947888CD346A2173AC7CF5632B3BC1731798E8A185E357
B6170FB544C4E62E67548F623137A7AB7CDDA0199B95174B8248B99079BA17D7
576B2366E1D2A599DF8B7A7311DB29168CC7601F8A574007BE9BF059B8E6B9C3
33A8A76399F351BA794455A76576FF202C538522DC4322415D3D95558A922200
CAD1C51DCA1A8DDB> |-
/n <1C60D8A8C9B08A95D5A79985A82729CAE756D0489927049B3AC5AD297F11
9E619696376E0B6189D572CB420FC284B8916A433D6CA72DAB6E9F2D9D40524B
2B929A9A9459C8CB333F922F05B99A6BC6506957A6EE029B29865AED5589> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FB6F6577354494CA3DECA47380B2C37
A25E2EB3100FFAAA02AFA054B544454E644EDD5490F7B9201279FCF65C33A6D3
103A2DA6DAE8B5A62052765FE276C88CD4D69543AEB22A0F8B> |-
/p <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F172EEEB26447
49A82F71821724B981BB3426845AF95FA0CC55A3E12C309D8BFD78C41B42FDF9
C58F4012F9B413CE755AD9BCE1BBDC16B0B23A7605D3D78683D7A096353FF8D2
57F390D14D8D1B2A6363167FC2C32989988357B469C399FD> |-
/q <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F1701B048254D
CA6AF7146A321CAB5B1B1F16F7EFF2E150A762C41F0193193FE57DC06A457D9A
97E0FD01DCD4BD2694A09CFC15EE28B724EA9E0DDEB751B45B03B38CD8450BFC
64E98685C55E988C92D8D3D18E644272FBBF> |-
/r <1C60D8A8C9B08A959965E2515C2E939D32F95F06D24956DF38D569A451B7
7ADF663A0723CA120245B8097325DCB678E86A84A0E1B432D1C1D70949B9D394
C3B01C45BD84CB> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350F4E0B4C4E95368D3
ED9C590C346D70815287BB49237A3503FC5E1BEDB26DFBAC5FE3F90D22228C38
18C681A5E061BAA32D06047B0C2A4D940CD45D98CB049AEC91D7BA9B17BABCF7
9AEAC8874C54A3BA02BD> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A02D99871863CB5ED57098EBE
E28B62529A66E2E5A6C1D9B043A93DBF20DB5A8F23152C87CA9379DFF902E01A
B689E8108B5E3C987FCC629872050E848B3094C829084E32040C2430> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXG+CMSSI10 /Encoding get
dup 19 /acute put
dup 80 /P put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXG+CMSSI10*1 
[19{/.notdef}rp /acute 60{/.notdef}rp /P 16{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /.notdef /t /u 
138{/.notdef}rp]
JRFCXG+CMSSI10 nf
JRFCXG+CMSSI10*1 [7.31203 0 0 -7.31203 0 0 ]msf
87.528 268.585 mo
(Programmep\023edagogiquenational)
[4.67166 2.49856 3.65601 3.65601 2.49857 3.51421 5.80869 5.8087 5.68436 3.58064 .197433 3.24945 
3.77806 3.51421 3.65602 3.65602 3.65602 1.74689 3.77808 3.77808 5.69165 3.77808 3.51421 2.64037 
1.7469 3.65602 3.77808 3.50688 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
189.978 268.585 mo
(,UFSyst\022emes:)
[4.4662 5.02701 6.60567 4.06259 3.37161 2.8027 2.43564 .204727 3.24944 5.80872 3.24944 5.23763 
0 ]xsh
62.2809 277.666 mo
(Fondementsetmiseenoeuvre:TC-INFO-ASR4\(40h\))
[3.95871 3.65601 3.77808 3.77808 3.24944 5.8087 3.24944 3.77808 2.64036 5.24493 3.24944 5.07528 
5.8087 1.74689 2.8027 5.69167 3.24944 6.213 3.86075 3.24944 3.77808 3.37163 2.49855 5.68434 
4.4662 4.97659 4.67166 2.43709 2.0313 5.17908 3.96602 5.38239 2.43707 4.87495 4.06259 4.72209 
6.09093 2.84364 3.65601 3.65604 3.77808 0 ]xsh
69.9998 289.686 mo
73.2492 289.686 li
73.2492 286.437 li
69.9998 286.437 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXF+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B08A9478891F8867AA82DA5DABADC0B2152308D2D2387DDA58
4B9D236055D34B076556C58AAEF4F052954F4FEA90FA1611DDE540E5A005F968
FAA65ECD72DBDC23F049D0BC09A485AF436D09507BC8527BB569F80D47E6C2DB
EE50D49931C0790EC8> |-
/f <1C60D8A8C9B08A959FA2344A254B851BC15CB7C603A89E6BE5139BB6A47D
E0D5DBFE9133C96BD0ABD4E6184A3F398882292ED38B539E4218904F8CDA3748
50F5C750BDAF2EB9F48CCE490CC78491FEF0A4198CC3F59CC8FEB96F7ECF9758
6E0DF6404AFC54C2942D7A47BB6D9A00220F313226B1CF38DF7DA4A6415DA63D
5B> |-
/j <1C60D8A8C9B08A9573ADDF50E48DB852A21734A61D8A0AAAB1A71429B589
860FAA49968CF174AEAC1E4CC0D131AEC72FBF5995624447052CB8D44A37C01C
32BCCAA79F396BC82BAC88CE746A9AC5E8400CA7323A86D2DACC8D5392E86C68
3ACE884D2F3DFA2911370547A7EF312DB35418EDF01DB328F92190E69FD7E4F8
629623> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXF+CMSSBX10 /Encoding get
dup 79 /O put
dup 102 /f put
dup 106 /j put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 39{/.notdef}rp /O 17{/.notdef}rp 
/a /b /c /d /e /f 2{/.notdef}rp /i 
/j /.notdef /l /m /n /o /p /.notdef 
/r /s /t /u /v /.notdef /x /y 
134{/.notdef}rp]
JRFCXF+CMSSBX10 nf
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9055 289.686 mo
(Objectifs)
[5.80869 4.10275 2.09199 3.73714 3.5749 2.95556 1.86896 2.45761 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091A804487D3CC
69BB9C43B70B1C054AE8BCF010FEB975725958C0171BBED6676C9AAAE6CFEE46
F69DED7901CD1C4DCA677E0DE526159ACDEB3DE152447BA9BBFE3963B6938BEA
3024E87A005166176A2DFF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp 
/comma /hyphen /period /.notdef /zero /one /two /.notdef 
/four 4{/.notdef}rp /nine /colon 6{/.notdef}rp /A /.notdef /C 
/D /E /F 2{/.notdef}rp /I 4{/.notdef}rp /N /O 
/P /.notdef /R /S /T /U 8{/.notdef}rp /circumflex 
2{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /j /.notdef /l /m /n /o 
/p /q /r /s /t /u /v /.notdef 
/x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
109.023 289.686 mo
(Sensibiliserles\023etudiantsauxprobl\022emes)
[4.06258 3.24944 3.77808 2.80271 1.74689 3.77807 1.7469 1.74689 1.7469 2.8027 3.24945 4.93346 
1.7469 3.24944 5.04019 .204727 3.24945 2.64037 3.77808 3.77808 1.74689 3.51421 3.77808 2.64038 
5.23761 3.51422 3.77808 5.8065 3.57335 2.49855 3.65602 3.77808 1.54947 .197433 3.24944 5.8087 
3.25676 0 ]xsh
76.9055 297.699 mo
(d'administration:)
[3.77808 2.03129 3.51421 3.77808 5.8087 1.74689 3.77808 1.74689 2.80271 2.64037 2.49855 3.51421 
2.64037 1.74689 3.65601 6.21298 0 ]xsh
84.9059 307.048 mo
87.8738 307.048 li
87.8738 304.08 li
84.9059 304.08 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
91.5295 307.048 mo
(savoir)
[2.55954 3.2093 3.07909 3.33881 1.59532 0 ]xsh
JRFCXF+CMSSBX10*1 [6.67762 0 0 -6.67762 0 0 ]msf
109.912 307.048 mo
(installerunsyst\022eme)
[1.7068 3.74678 2.816 2.69913 3.50571 1.7068 1.70679 3.41288 4.93605 3.74678 6.19081 2.81599 
3.33882 2.81599 2.57225 .126892 3.4129 5.78749 0 ]xsh
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
170.371 307.048 mo
(,)sh
84.9059 315.061 mo
87.8738 315.061 li
87.8738 312.093 li
84.9059 312.093 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/dotlessi <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A0DCD20371E1
11A46CFBE2F7981C95420E7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 16 /dotlessi put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[16{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp /quoteright /parenleft 
/parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 
/two /.notdef /four 4{/.notdef}rp /nine /colon 6{/.notdef}rp /A 
/.notdef /C /D /E /F 2{/.notdef}rp /I 4{/.notdef}rp 
/N /O /P /.notdef /R /S /T /U 
8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /.notdef /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
91.5295 315.061 mo
(conna^\020treles)
[2.96751 3.33881 3.45029 3.45028 2.33453 .874771 1.59533 2.41129 2.28178 5.19117 1.59532 2.96752 
0 ]xsh
JRFCXF+CMSSBX10*1 [6.67762 0 0 -6.67762 0 0 ]msf
128.776 315.061 mo
(principesdebased'administration)
[3.53978 2.49203 1.70013 3.74677 3.26474 1.70682 3.95378 3.41289 5.26669 3.74678 5.8569 3.74678 
3.50571 2.81601 5.86357 3.74678 2.04071 3.50571 3.7468 5.78748 1.7068 3.7468 1.7068 2.81599 
2.69913 2.48535 3.50572 2.69913 1.7068 3.67271 0 ]xsh
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
234.94 315.061 mo
(d'un)
[3.45029 1.85504 3.45029 0 ]xsh
91.5295 323.074 mo
(syst\022eme.)
[2.55954 3.07909 2.55954 2.22431 .186974 2.96751 5.30472 2.96751 0 ]xsh
69.9998 333.091 mo
73.2492 333.091 li
73.2492 329.841 li
69.9998 329.841 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXF+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B08A945CCE5F169C2AB8EBE5F200F243A52208D352AEE2DD81
502361B221DC509053418831FB1364F630330D4C247EF677E2535D90375F80F8
EC1C7510BA9271D6D824B77CB9C222E349C966CA1B92F6BADDE83CF553257AF2
8603B05CFDC397231462FA80BDDE2EB5D22CBEED67F68E7F849804DB43AC0ED3
E437E25761ACAFB3F94433F31E7EEBA2B0DC0B94873689> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXF+CMSSBX10 /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 27{/.notdef}rp /C 11{/.notdef}rp 
/O 17{/.notdef}rp /a /b /c /d /e /f 
2{/.notdef}rp /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /v /.notdef 
/x /y 134{/.notdef}rp]
JRFCXF+CMSSBX10 nf
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9055 333.091 mo
(Comp\023etencesminimales)
[5.13892 4.02164 6.33733 3.95651 .146263 3.73713 2.95556 3.73713 4.10275 3.5749 3.73713 5.76705 
6.33733 1.86896 4.10275 1.86163 6.33734 3.83878 1.86894 3.73712 0 ]xsh
84.9059 342.44 mo
87.8738 342.44 li
87.8738 339.472 li
84.9059 339.472 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
91.5295 342.44 mo
(Conna^\020treles)
[4.26633 3.33881 3.45028 3.45028 2.33454 .874763 1.59533 2.41129 2.28178 5.19116 1.59533 2.96751 
0 ]xsh
JRFCXF+CMSSBX10*1 [6.67762 0 0 -6.67762 0 0 ]msf
130.075 342.44 mo
(principauxprincipesetconcepts)
[3.53979 2.48535 1.7068 3.74678 3.26474 1.7068 3.74678 3.50571 3.74678 5.78951 3.54646 2.48535 
1.7068 3.74678 3.26474 1.70012 3.9538 3.41289 5.26668 3.41289 5.14314 3.26474 3.67271 3.74678 
3.26474 3.41287 3.7468 2.69914 0 ]xsh
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
229.805 342.44 mo
(dessyst\022emes)
[3.45029 2.96751 4.78319 2.55952 3.0791 2.55952 2.23099 .180313 2.97417 5.30472 2.96753 0 
]xsh
91.5295 350.453 mo
(d'exploitation)
[3.45028 1.85506 2.96751 3.07909 3.45029 1.59532 3.33881 1.59533 2.41129 3.2093 2.41129 1.59532 
3.33881 0 ]xsh
JRFCXF+CMSSBX10*1 [6.67762 0 0 -6.67762 0 0 ]msf
131.502 350.453 mo
(auniveauinterne)
[3.50571 6.19748 3.74678 1.7068 3.33881 3.4129 3.50571 6.1908 1.7068 3.74678 2.69913 3.41289 
2.48537 3.74678 0 ]xsh
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
184.322 350.453 mo
(.)sh
84.9059 358.466 mo
87.8738 358.466 li
87.8738 355.498 li
84.9059 355.498 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
91.5295 358.466 mo
(Conna^\020trequelquesm\023ecanismesde)
[4.26633 3.33881 3.45028 3.45028 2.33454 .874763 1.59533 2.41129 2.28178 5.19116 3.45028 3.45028 
2.96751 1.59534 3.45027 3.45029 2.96751 4.78986 5.11775 .186981 2.9675 2.96753 3.2093 3.45027 
1.59534 2.55954 5.3047 2.96753 4.78319 3.45027 0 ]xsh
JRFCXF+CMSSBX10*1 [6.67762 0 0 -6.67762 0 0 ]msf
190.6 358.466 mo
(miseenoeuvre)
[5.78749 1.7068 2.81599 5.86357 3.41289 6.19081 3.8797 3.41289 3.7468 3.33881 2.48537 0 
]xsh
JRFCXC+CMSS10*1 [6.67762 0 0 -6.67762 0 0 ]msf
238.879 358.466 mo
(des)
[3.45029 2.96751 0 ]xsh
91.5295 366.479 mo
(syst\022emesd'exploitationmultit^aches,multi-utilisateurs.)
[2.55954 3.07909 2.55954 2.2243 .186981 2.96751 5.30473 2.96751 4.78986 3.45029 1.85506 2.96751 
3.07909 3.45027 1.59534 3.33881 1.59532 2.4113 3.20929 2.41129 1.59532 3.33882 5.67392 5.30473 
3.45029 1.59532 2.41129 1.59534 2.3445 .0667725 3.2093 2.96751 3.45029 2.96751 2.55954 4.0787 
5.30472 3.45027 1.59534 2.41127 1.59534 2.22565 3.45027 2.41127 1.59535 1.59532 1.59534 2.55954 
3.2093 2.41127 2.96753 3.45027 2.28178 2.55954 0 ]xsh
grestore
gsave
325.521 394.139 mo
568.719 394.139 li
568.719 211.741 li
325.521 211.741 li
cp
clp
325.521 394.139 mo
568.719 394.139 li
568.719 211.741 li
325.521 211.741 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
486.316 391.267 mo
488.587 391.267 li
488.587 389.665 li
486.316 389.665 li
cp
.308354 .28983 0 0 cmyk
@
483.455 391.466 mo
482.114 390.461 li
483.455 389.456 li
.138705 .129152 0 0 cmyk
f
491.498 391.466 mo
492.839 390.461 li
491.498 389.456 li
f
499.986 391.802 mo
502.257 391.802 li
502.257 390.199 li
499.986 390.199 li
cp
500.54 390.193 mo
500.54 389.657 li
502.819 389.657 li
502.819 391.265 li
502.283 391.265 li
501.076 389.657 mo
501.076 389.12 li
503.355 389.12 li
503.355 390.729 li
502.819 390.729 li
.308354 .28983 0 0 cmyk
@
497.993 391.466 mo
496.653 390.461 li
497.993 389.456 li
506.036 391.466 mo
507.377 390.461 li
506.036 389.456 li
.138705 .129152 0 0 cmyk
f
.40066 lw
515.882 389.791 mo
517.893 389.791 li
.308354 .28983 0 0 cmyk
@
512.531 391.466 mo
511.19 390.461 li
512.531 389.456 li
520.574 391.466 mo
521.914 390.461 li
520.574 389.456 li
.138705 .129152 0 0 cmyk
f
515.212 389.12 mo
517.222 389.12 li
515.882 390.461 mo
517.893 390.461 li
515.212 391.131 mo
517.222 391.131 li
515.882 391.802 mo
517.893 391.802 li
@
529.75 389.12 mo
531.761 389.12 li
530.42 389.791 mo
532.431 389.791 li
530.42 390.461 mo
532.431 390.461 li
.308354 .28983 0 0 cmyk
@
527.069 391.466 mo
525.728 390.461 li
527.069 389.456 li
535.112 391.466 mo
536.453 390.461 li
535.112 389.456 li
.138705 .129152 0 0 cmyk
f
529.75 391.131 mo
531.761 391.131 li
530.42 391.802 mo
532.431 391.802 li
@
544.287 389.12 mo
546.298 389.12 li
544.958 389.791 mo
546.968 389.791 li
544.958 390.461 mo
546.968 390.461 li
544.287 391.131 mo
546.298 391.131 li
544.958 391.802 mo
546.968 391.802 li
.308354 .28983 0 0 cmyk
@
560.434 390.729 mo
561.506 391.802 li
@
.267102 lw
560.608 390.132 mo
560.608 389.687 560.252 389.331 559.807 389.331 cv
559.362 389.331 559.006 389.687 559.006 390.132 cv
559.006 390.577 559.362 390.933 559.807 390.933 cv
560.252 390.933 560.608 390.577 560.608 390.132 cv
cp
@
1 lc
556.144 391.802 mo
556.869 391.802 557.485 391.198 557.485 390.461 cv
557.485 389.724 556.882 389.12 556.144 389.12 cv
555.407 389.12 554.804 389.724 554.804 390.461 cv
555.608 390.059 mo
554.804 390.729 li
553.999 390.059 li
564.188 391.802 mo
563.45 391.802 562.847 391.198 562.847 390.461 cv
562.847 389.724 563.45 389.12 564.188 389.12 cv
564.925 389.12 565.528 389.724 565.528 390.461 cv
566.333 390.059 mo
565.528 390.729 li
564.724 390.059 li
@
325.521 218.196 mo
568.719 218.196 li
568.719 211.741 li
325.521 211.741 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
331.221 216.193 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.7197 1.3338 .121368 1.89191 1.6319 1.89191 2.19803 1.53732 2.04498 1.53732 1.01566 2.12869 
3.61636 2.19803 3.61633 1.89191 2.12869 2.19803 1.45398 3.05023 2.83789 2.36508 2.75455 2.12869 
1.41913 2.36511 1.96161 1.6319 1.42114 .117371 1.89191 3.38074 0 ]xsh
325.521 224.651 mo
568.719 224.651 li
568.719 218.196 li
325.521 218.196 li
cp
.824216 .796414 0 0 cmyk
f
.266767 lw
0 lc
332.691 221.379 mo
332.691 218.04 li
1 /0 /CSD get_res sepcs
0 sep
@
332.824 221.246 mo
336.163 221.246 li
@
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
336.831 222.648 mo
(Programmeo\016ciel)
[2.7197 1.45401 2.12869 2.12869 1.45398 2.04498 3.38077 3.38074 3.31027 2.12866 3.46408 1.89191 
1.01566 1.89194 0 ]xsh
325.521 231.106 mo
568.719 231.106 li
568.719 224.651 li
325.521 224.651 li
cp
.514061 .481117 0 0 cmyk
f
337.632 227.834 mo
337.632 224.496 li
1 /0 /CSD get_res sepcs
0 sep
@
337.765 227.7 mo
341.104 227.7 li
@
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
341.772 229.103 mo
(Programmedel'UF)
[2.7197 1.45401 2.12869 2.12869 1.45398 2.04498 3.38077 3.38074 3.31027 2.198 3.31024 1.01566 
1.18237 2.92163 0 ]xsh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B08A95E89BD1FA55F3C9FC54E2C9863902D6F75D05C264F001
7A0B5F36FB1EEF0F11263D359B596A218B0E0906D9CAF1169A5CCAF48E4FC013
81571B4E5A62FB5021C54228B20ECEF037A9A1D6C4A19F4113734CA5D977DBBA
DA1E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp /hyphen 4{/.notdef}rp 
/two 14{/.notdef}rp /A /.notdef /C 11{/.notdef}rp /O /P 
/.notdef /R /S 13{/.notdef}rp /a /b /c /d 
/e /f 2{/.notdef}rp /i /j /.notdef /l /m 
/n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
331.221 245.22 mo
(Contenu)
[6.01559 4.70786 4.83005 3.40024 4.18475 4.83008 0 ]xsh
352.24 270.028 mo
355.489 270.028 li
355.489 266.779 li
352.24 266.779 li
cp
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 270.028 mo
(Architecturesdenoyau.)
[4.87494 2.49857 3.24945 3.77808 1.74689 2.64038 3.24945 3.24942 2.64038 3.77808 2.49857 3.24945 
5.23761 3.77808 5.69165 3.77808 3.45129 3.16687 3.51422 3.77808 0 ]xsh
352.24 281.113 mo
355.489 281.113 li
355.489 277.864 li
352.24 277.864 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 281.113 mo
(Partagedel'unit\023ecentrale.)
[4.46692 3.30948 2.49857 2.64035 3.51422 3.65601 5.69168 3.77808 5.68433 1.74692 2.03128 3.77808 
3.77808 1.74689 2.43564 .204742 5.68436 3.24945 3.24945 3.77808 2.64035 2.49857 3.51419 1.74692 
3.24942 0 ]xsh
352.24 292.198 mo
355.489 292.198 li
355.489 288.949 li
352.24 288.949 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B08A944AAF3A41AE50C6A3E7588471850A270BFB011EF44BFA
19648F82DF16DAD5B24375BE5FF8B2431CF8300971B59A5AF73BAF6D880F19EF
BC305C8BB76865C6EEA4AC2F1A290723008A11FF5789E0A418BFA9C5E9B68740
8C5C4C010B040A40A4BDE37268984DD12805F819C6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 71 /G put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[16{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp /quoteright /parenleft 
/parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 
/two /.notdef /four 4{/.notdef}rp /nine /colon 6{/.notdef}rp /A 
/.notdef /C /D /E /F /G /.notdef /I 
4{/.notdef}rp /N /O /P /.notdef /R /S /T 
/U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /.notdef /l 
/m /n /o /p /q /r /s /t 
/u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 292.198 mo
(Gestiondelam\023emoirecentrale.)
[4.87494 3.24945 2.8027 2.64038 1.74689 3.65601 6.21298 3.77808 5.69168 1.74689 5.94913 5.60394 
.204742 3.24945 5.80869 3.65604 1.74689 2.49857 5.68433 3.24945 3.25677 3.77075 2.64038 2.49857 
3.51419 1.74689 3.24945 0 ]xsh
352.24 303.283 mo
355.489 303.283 li
355.489 300.034 li
352.24 300.034 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 303.283 mo
(Syst\022emed'entr\023ee-sortie.)
[4.06259 3.37161 2.8027 2.43564 .204742 3.24945 5.80869 5.68436 3.77808 2.03128 3.24945 3.77808 
2.64038 2.30112 .197449 3.24942 3.24945 2.4444 2.8027 3.45126 2.49857 2.64038 1.74689 3.24945 
0 ]xsh
352.24 314.368 mo
355.489 314.368 li
355.489 311.119 li
352.24 311.119 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B08A95CD6BAE6E9C8355F692F0A6287CF13AA71F63B5E7E09
675CFE68D2663321A41A4860A9595B40356344EFA4D49130EC982B30F01F232F
29DA746D7A666723872DC256F0F74FDF6C998887E901CA2500D1DFEB17EC36B6
10CFDF9E9B1F3C4CF2E5037EEE5FA0F6104A728> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 12 /fi put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /.notdef /four 4{/.notdef}rp /nine /colon 
6{/.notdef}rp /A /.notdef /C /D /E /F /G 
/.notdef /I 4{/.notdef}rp /N /O /P /.notdef /R 
/S /T /U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /j 
/.notdef /l /m /n /o /p /q /r 
/s /t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 314.368 mo
(Syst\022emedegestionde\014chiers.)
[4.06259 3.37161 2.8027 2.43564 .204742 3.24945 5.80869 5.68436 3.77808 5.69165 3.65604 3.24942 
2.80273 2.64035 1.74689 3.65604 6.21298 3.77808 5.69165 3.91998 3.24945 3.77808 1.74689 3.24945 
2.49857 2.8027 0 ]xsh
352.24 325.453 mo
355.489 325.453 li
355.489 322.203 li
352.24 322.203 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B69E59BC73D93FC5A356A227E17EA9C31EFFA71275C6B5EB76
9923CE4FA51C8A1EAEED0428CE577507A9116D4E93C97EF19E9F9C7938C83656
342A6195D2BADF02DD8FE47428F019C292D90E07E4319371C83FC96B01EBE161
D7AEA1A5C028EB3560F099A0C07EAACAE48658B786> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 77 /M put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /.notdef /four 4{/.notdef}rp /nine /colon 
6{/.notdef}rp /A /.notdef /C /D /E /F /G 
/.notdef /I 3{/.notdef}rp /M /N /O /P /.notdef 
/R /S /T /U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/j /.notdef /l /m /n /o /p /q 
/r /s /t /u /v /.notdef /x /y 
134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 325.453 mo
(Miseenoeuvredesprocessus.Cr\023eation,\023etats,)
[6.39804 1.74689 2.8027 5.68436 3.24945 6.22028 3.85345 3.25674 3.77808 3.37161 2.49124 5.69168 
3.77808 3.24945 5.23761 3.57333 2.49857 3.86075 3.24942 3.24945 2.80273 2.8027 3.77808 2.8027 
4.47351 4.67166 2.29382 .204712 3.24948 3.51419 2.64035 1.74689 3.65604 3.77808 4.26147 .204742 
3.24942 2.64038 3.51419 2.64038 2.8027 0 ]xsh
352.24 336.538 mo
355.489 336.538 li
355.489 333.288 li
352.24 333.288 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 336.538 mo
(\(Coop\023erationdeprocessus,exclusionmutuelle.\))
[2.84366 4.67166 3.86075 3.65601 3.57336 .204712 3.24945 2.49857 3.51422 2.64035 1.74689 3.65604 
6.21298 3.77808 5.68436 3.58063 2.49127 3.86075 3.24945 3.24942 2.8027 2.80273 3.77808 2.8027 
4.47348 3.24945 3.37161 3.24945 1.74692 3.77808 2.8027 1.74689 3.65601 6.21298 5.80872 3.77808 
2.64035 3.77808 3.24945 1.74689 1.74692 3.24942 2.03128 0 ]xsh
352.24 347.623 mo
355.489 347.623 li
355.489 344.373 li
352.24 344.373 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 347.623 mo
(\(Outilsetmod\022elesdesynchronisation.\))
[2.84366 5.38239 3.77808 2.64035 1.74692 1.74689 5.23761 3.24945 5.08258 5.80869 3.86078 3.57333 
.197418 3.25674 1.74692 3.24942 5.23764 3.77808 5.68433 2.8027 3.37164 3.77808 3.24942 3.77808 
2.49857 3.65604 3.77808 1.74689 2.8027 3.51419 2.64038 1.74689 3.65601 3.77808 2.03131 0 
]xsh
352.24 358.708 mo
355.489 358.708 li
355.489 355.458 li
352.24 355.458 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 358.708 mo
(Principesdel'administrationd'unsyst\022eme.)
[4.67166 2.49857 1.74689 3.77808 3.24945 1.74689 3.98282 3.24945 5.23761 3.77808 5.68436 1.74689 
2.03128 3.51422 3.77808 5.80869 1.74692 3.77808 1.74689 2.8027 2.64035 2.49857 3.51422 2.64035 
1.74692 3.65601 6.22028 3.77808 2.03131 3.77808 6.21298 2.8027 3.37164 2.80267 2.43564 .204742 
3.24945 5.80869 3.24945 0 ]xsh
352.24 369.793 mo
355.489 369.793 li
355.489 366.543 li
352.24 366.543 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 369.793 mo
(\(Protection,s\023ecurit\023e\),sauvegardes.)
[2.84366 4.67166 2.49857 3.65601 2.64038 3.24945 3.24942 2.64038 1.74689 3.65601 3.77808 4.46622 
2.60529 .197418 3.24945 3.24945 3.77808 2.49854 1.74692 2.44293 .197418 3.24945 2.84366 4.47351 
2.8027 3.51422 3.77808 3.37161 3.24942 3.65604 3.30948 2.49854 3.77808 3.24945 2.8027 0 
]xsh
grestore
gsave
43.2815 580.259 mo
286.478 580.259 li
286.478 397.861 li
43.2815 397.861 li
cp
clp
43.2815 580.259 mo
286.478 580.259 li
286.478 397.861 li
43.2815 397.861 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
204.076 577.387 mo
206.347 577.387 li
206.347 575.785 li
204.076 575.785 li
cp
.308354 .28983 0 0 cmyk
@
201.215 577.586 mo
199.874 576.581 li
201.215 575.576 li
.138705 .129152 0 0 cmyk
f
209.258 577.586 mo
210.599 576.581 li
209.258 575.576 li
f
217.746 577.922 mo
220.017 577.922 li
220.017 576.319 li
217.746 576.319 li
cp
218.3 576.313 mo
218.3 575.777 li
220.579 575.777 li
220.579 577.385 li
220.043 577.385 li
218.836 575.777 mo
218.836 575.24 li
221.115 575.24 li
221.115 576.849 li
220.579 576.849 li
.308354 .28983 0 0 cmyk
@
215.753 577.586 mo
214.413 576.581 li
215.753 575.576 li
223.796 577.586 mo
225.137 576.581 li
223.796 575.576 li
.138705 .129152 0 0 cmyk
f
.40066 lw
233.642 575.911 mo
235.653 575.911 li
.308354 .28983 0 0 cmyk
@
230.291 577.586 mo
228.95 576.581 li
230.291 575.576 li
238.334 577.586 mo
239.674 576.581 li
238.334 575.576 li
.138705 .129152 0 0 cmyk
f
232.972 575.24 mo
234.982 575.24 li
233.642 576.581 mo
235.653 576.581 li
232.972 577.251 mo
234.982 577.251 li
233.642 577.922 mo
235.653 577.922 li
@
247.51 575.24 mo
249.521 575.24 li
248.18 575.911 mo
250.191 575.911 li
248.18 576.581 mo
250.191 576.581 li
.308354 .28983 0 0 cmyk
@
244.829 577.586 mo
243.488 576.581 li
244.829 575.576 li
252.872 577.586 mo
254.213 576.581 li
252.872 575.576 li
.138705 .129152 0 0 cmyk
f
247.51 577.251 mo
249.521 577.251 li
248.18 577.922 mo
250.191 577.922 li
@
262.047 575.24 mo
264.058 575.24 li
262.717 575.911 mo
264.728 575.911 li
262.717 576.581 mo
264.728 576.581 li
262.047 577.251 mo
264.058 577.251 li
262.717 577.922 mo
264.728 577.922 li
.308354 .28983 0 0 cmyk
@
278.194 576.849 mo
279.266 577.922 li
@
.267102 lw
278.368 576.252 mo
278.368 575.807 278.012 575.451 277.567 575.451 cv
277.122 575.451 276.766 575.807 276.766 576.252 cv
276.766 576.697 277.122 577.053 277.567 577.053 cv
278.012 577.053 278.368 576.697 278.368 576.252 cv
cp
@
1 lc
273.904 577.922 mo
274.629 577.922 275.245 577.318 275.245 576.581 cv
275.245 575.844 274.642 575.24 273.904 575.24 cv
273.167 575.24 272.564 575.844 272.564 576.581 cv
273.368 576.179 mo
272.564 576.849 li
271.759 576.179 li
281.948 577.922 mo
281.21 577.922 280.607 577.318 280.607 576.581 cv
280.607 575.844 281.21 575.24 281.948 575.24 cv
282.685 575.24 283.288 575.844 283.288 576.581 cv
284.092 576.179 mo
283.288 576.849 li
282.484 576.179 li
@
43.2815 404.316 mo
286.478 404.316 li
286.478 397.861 li
43.2815 397.861 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
48.9815 402.313 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.71969 1.33379 .121384 1.89191 1.6319 1.89191 2.19802 1.53732 2.04499 1.53732 1.01565 2.12869 
3.61635 2.19802 3.61636 1.89191 2.12869 2.19802 1.45399 3.05024 2.83786 2.3651 2.75454 2.12868 
1.41914 2.3651 1.9616 1.6319 1.42113 .117371 1.89191 3.38075 0 ]xsh
43.2815 410.771 mo
286.478 410.771 li
286.478 404.316 li
43.2815 404.316 li
cp
.824216 .796414 0 0 cmyk
f
.266767 lw
0 lc
50.4507 407.499 mo
50.4507 404.16 li
1 /0 /CSD get_res sepcs
0 sep
@
50.5841 407.366 mo
53.9227 407.366 li
@
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
54.591 408.768 mo
(Calendrier)
[2.71969 2.04499 1.01565 1.89191 2.19802 2.19801 1.45399 1.01565 1.89191 0 ]xsh
43.2815 417.226 mo
286.478 417.226 li
286.478 410.771 li
43.2815 410.771 li
cp
.514061 .481117 0 0 cmyk
f
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B08A95D295CC148B6294457BC97CEC2DAA4B884E65A3D9EDBF
881794910D9567D196AE71D8BE84C621E0520F35> |-
/p <1C60D8A8C9B08A95D8E840BC3BFE05E0D0300A335E53BBD0914F71156BC6
5D81FA1B46992C8A0F67B12F4BE8475BFEE70ADCA0DDDA81C9CCE4F75368AA74
7321535EFD20085E236EEA1D0F093031203CBF8475CC33A222D8474A0B14C7DA
1269B67E612ABC7A39689703C2A3A4> |-
/v <1C60D8A8C9B08A95B2CCC00C0CACD7E211E48A51C4A1208ED0036B45BF22
C6193D8E2805C184D9F92751096B0336BC9DD20ACB063825FAF35567BC278F82
2A581B614548E5F96443> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 76 /L put
dup 112 /p put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp /hyphen 4{/.notdef}rp 
/two 14{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 2{/.notdef}rp 
/O /P /.notdef /R /S 13{/.notdef}rp /a /b 
/c /d /e /f 2{/.notdef}rp /i /j /.notdef 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
48.9815 431.34 mo
(Lecalendrierpr\023evisionnel)
[5.0858 7.31952 4.18476 4.50697 2.21452 4.18476 4.83006 4.83006 3.20009 2.21453 4.18476 6.34446 
4.57043 2.93084 .265335 4.18476 4.30699 2.21452 3.60886 2.21453 4.70783 4.83006 4.83006 4.18475 
0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9E354DDC1C1E895818E2BC9DBEF8CE3DE830
7ADE59E33534181C21C31E4CFD49BD833A4647D53B7ABF4ED2D36E98A9B18A81
E5CF9DE62D69126DD951C57BB2880D8B6060D8FA83E7ACFB2B9EAF7DB7FE5793
E2D0A9A9A1D105BAFC879E3DCA9EE426E4FAF62547B53112411A4272C6CE1B84
4B3BECB0C336B882062D1A9DE7A0D146B5F663BB3D1DD7EA7C0E84DDEED0554D
100E1B7607E7B27D7FF0870796CA2A832CB7384DAC94C456FE634EC45128E8AE
7229E9BCDE2E6> |-
/plus <1C60D8A8C9B08A9461828376290042B3B0012119E49A5F8A40FFB07EC
16079327C8839C8F2280897EA08CCF42D3B4E2B36A495896A102B0E0B676D7CD
E615B4B502BC24C313F43E124C5C3EF4728FA76AB60F029D0136D86C00EF66A5
8511B752E> |-
/eight <1C60D8A8C9B7A73D3B44BE7B3BE7FFF019E7EA34A15DED5B2D465B7A
EF0670A9A82FD7960ADCB9AC66DFEEF0861C850B47C18C8FDA29F7110651E34D
B968A252461EC8952242A73E5EB97F44A6426892D458558FFACEEDFD9EE7CEFC
F2EBA0F87B093BA3F7C5A1995F8226596B2F5C1F5B66D610213976210B72F90B
CCC0A2F9F74525CA504F> |-
/L <1C60D8A8C9B08A95CF0AD19F21AB368486DFF0EA52B92677B9DBFAB95E13
BD476D31E8E6AA2B86DF27A5D8F7A57B5295549F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 42 /asterisk put
dup 43 /plus put
dup 56 /eight put
dup 76 /L put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /.notdef /four 3{/.notdef}rp /eight 
/nine /colon 6{/.notdef}rp /A /.notdef /C /D /E 
/F /G /.notdef /I 2{/.notdef}rp /L /M /N 
/O /P /.notdef /R /S /T /U 8{/.notdef}rp 
/circumflex 2{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u /v 
/.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
62.281 464.581 mo
(Lecourssed\023eroulesur8semaines\(C+TDou2*TD\))
[3.96094 5.68435 3.24944 3.65602 3.77808 2.49856 5.24492 2.80271 5.68435 3.57334 .204727 3.24945 
2.49856 3.65601 3.77808 1.74689 5.68435 2.80271 3.77806 4.94078 6.09091 2.80272 3.24944 5.8087 
3.51421 1.74689 3.77808 3.24945 5.24492 2.84366 4.67166 5.6873 4.96928 7.72295 3.65602 6.21298 
3.65602 3.65601 4.97661 5.28072 0 ]xsh
.90045 .872435 0 .000396735 cmyk
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
63.5002 477.669 mo
(1-2)
[3.65601 2.43709 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: AMRBAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXF+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B08A956BA65798425C439FD063010DB67A680BF2955550
C4F93789A1E66AC9C53A982EB19689CCB68BBF2D101397524B10912B249577C6
C230F1FC1BACB76947C9E0AA8F4911321F54FBEE83D67AC36B55FB271EE696A4> |-
/slash <1C60D8A8C9B795A0BD5FD8B1B39A2BE8B5B7D221192AD635F72EA839
8A05E0479ED0BD3204E3F411431C4B6371C31D34C5DE2C3601BC17DDD9E60C02
A0CE2867CBC2AE181A8D> |-
/H <1C60D8A8C9B08A9478891F8867AA7C8A3D20A787A24B63C30B05EDDA8C15
CAC0E56C664E0EE940245034C7C2F19AF7C627C5D279865D92D888E6C08A8BCB
7254C5A3280F78BE768F037E76E2B5CBFC7675C951E51BBC4CAF283F80EE89C0
60787A42C0A52763897D617B47A35B6E> |-
/N <1C60D8A8C9B08A9478891F8867AA7C8A3D2E85EA46FBB89732746C1C9BCB
A370567B92F6CD4B493DA34BF4F72B30CE7F610EAF51C2C9A33F3E235EC4BA7F
CF195033E0368025C9504C8675179796E1AE410F1C977F713BE4D6EE76A899B7
B011745DD398BA9B40876B7A8F3CB2EA> |-
/P <1C60D8A8C9B08A945CCE5F169C2A46B732B98465F9B35C49C8A70AAFBE0C
77A1DFB67EEE3A265E55B6976451B3F98B18D7C89930F470BABBD3E5C8C6F0EA
3C81C01F710873F8F48E8106354C01BE7F4465C97B841B64C1FDB7DA34F32481
653C7E2DF07B62CACD1668> |-
/U <1C60D8A8C9B08A9464DE8546F88DD4229AB4A9BF9989689F7F9DC44E7046
2FA03F928E3ED468A63E25693C81C54393F7EB8DAD4F91F861338DC924A2E60B
9FF723063FC3C57D4D055C5AA294C0F7969043347C733A46F48FC1FAE214CE69
E3BCA4F2> |-
/g <1C60D8A8C9B795A0BDB3E7720F019ECAEE369DE588A3BCB46E303C5DA9ED
7D89C29395542A6F360F30B27AB8DAAE27C13EAD51313CD8397E65C9D91194FD
D0ED3BB0AC57448244ADD11F2E03EFC965CB67B26C81EAF58EC74A4B70BFB02D
7849F7264361B3C3680955EF79F1BAF290CDACA25555D829C711B164D7A9C24E
6D86F9D21E1EAF3606A88386DCC75470E151BDA348E7089DCADAE9E68545FEA5
F3664411908FE2FDE7A680105E78E12063933DC370999ADA467B6251347F7DA3
5E3915801AED54199C24F7B51956B5E84311E1B77E52DE4FB998120DB6A29B35
FD42F34EB68462EAA98769D05DE49E92B45B0810> |-
/q <1C60D8A8C9B08A95C7058C097FD3CD9681E8CAED12DADA320107363087FB
4A7C762273708FD2FE4A9A08D7DBDD13D6B5143F3DE981B0919E928DD70E37A9
8DF23C685F1A85F6EE5F063235AD446A7BA719323DE1E10D6A14C6016CC41C62
CD42F2422642B14E28A2AEEB6F764A798E41FB32FD408882227B16C6B4B94534
1F65111EF89DFAE48AC5667A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXF+CMSSBX10 /Encoding get
dup 44 /comma put
dup 47 /slash put
dup 72 /H put
dup 78 /N put
dup 80 /P put
dup 85 /U put
dup 103 /g put
dup 113 /q put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXF+CMSSBX10*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 4{/.notdef}rp /comma 2{/.notdef}rp 
/slash 19{/.notdef}rp /C 4{/.notdef}rp /H 5{/.notdef}rp /N /O 
/P 4{/.notdef}rp /U 11{/.notdef}rp /a /b /c /d 
/e /f /g /.notdef /i /j /.notdef /l 
/m /n /o /p /q /r /s /t 
/u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXF+CMSSBX10 nf
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9055 477.669 mo
(Historique,Notionsg\023en\023erales,Processus)
[5.80869 1.86896 3.08353 2.95556 3.79497 2.72148 1.86896 4.10275 4.10275 3.73713 4.91809 5.8087 
4.02164 2.95555 1.86896 4.02164 4.10275 5.76706 3.8754 .146255 3.73714 3.95651 .146271 3.73714 
2.72147 3.83876 1.86896 3.73715 3.08353 4.91078 5.13893 2.72147 4.24832 3.57489 3.73714 3.08354 
3.08353 4.10275 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/semicolon <1C60D8A8C9B08A9570810981675918941BEC6C7A3679F18F1787
77712297BC7B9D745B2395B7ED5DCECA24A2560C3DD9B4FB972F3FDD7C956805
289E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 59 /semicolon put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /.notdef /four 3{/.notdef}rp /eight 
/nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C /D 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /.notdef /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
215.383 477.669 mo
(\(basculementde)
[2.84366 3.77808 3.51421 2.8027 3.24945 3.77808 1.74687 3.24947 5.8087 3.24944 3.77808 5.07527 
3.77808 0 ]xsh
76.9055 486.751 mo
(contexte,\023etats,strat\023egiesd'ordonnancement...\))
[3.24944 3.65602 3.77808 2.64037 3.24944 3.37161 2.64037 3.24945 4.26877 .197426 3.24944 2.64037 
3.51421 2.64037 2.8027 4.47352 2.80269 2.64038 2.49855 3.51421 2.43564 .204727 3.24945 3.65601 
1.7469 3.24945 5.23761 3.77808 2.0313 3.45128 2.49857 3.77808 3.65601 3.77808 3.77808 3.51421 
3.77808 3.24944 3.24945 5.80869 3.24945 3.77808 2.64037 2.0313 2.03128 2.03131 0 ]xsh
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9055 495.832 mo
(installation/administrationd'unsyst\022emeUnix)
[1.86896 4.10275 3.08353 2.95556 3.83878 1.86895 1.86896 3.83877 2.95556 1.86896 4.02164 4.10275 
4.02164 3.83877 4.10275 6.33733 1.86894 4.10277 1.86894 3.08353 2.95557 2.7215 3.83876 2.95557 
1.86894 4.02164 6.77896 4.10275 2.23459 4.10274 6.78627 3.08354 3.65601 3.08354 2.80931 .146255 
3.73712 6.33734 6.41333 5.58568 4.10274 1.86896 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
230.575 495.832 mo
(;)sh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D3B44BE7B3BE12688EE7DDA3A63BDA62EEDB076E2
123EB921A3297B68A71F5DF92E7CDAF71A150A947FFEC101C8C7F263DD77DC4F
7F72BCB13AC247B7F12687C9B4904765C9156BEE359166190CA1B2094BC32103
9EC0AE22422B378A1337A7F24F1131A027BF6934C63B5D4012127C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /three /four 3{/.notdef}rp /eight 
/nine /colon /semicolon 5{/.notdef}rp /A /.notdef /C /D 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /.notdef /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
63.5002 506.917 mo
(3-4)
[3.65601 2.43708 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9053 506.917 mo
(Gestiondela)
[4.87495 3.24944 2.80271 2.64037 1.74689 3.65601 6.21298 3.77808 5.69166 1.74689 0 ]xsh
JRFCXF+CMSSBX10*1 [7.31203 0 0 -7.31203 0 0 ]msf
119.254 506.917 mo
(m\023emoire)
[6.19109 .146263 3.73713 6.33733 4.02164 1.86896 2.72148 0 ]xsh
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
150.452 506.917 mo
(\(del'allocationpartitionn\023ee\022ala)
[2.84364 3.77808 5.68436 1.74689 2.0313 3.51421 1.7469 1.74689 3.86075 3.24945 3.51421 2.64037 
1.7469 3.65601 6.21298 3.77808 3.30946 2.49857 2.64038 1.74687 2.64038 1.7469 3.65601 3.77808 
3.58064 .197433 3.24944 5.61855 .0731354 5.9491 1.7469 0 ]xsh
76.9055 515.999 mo
(m\023emoirevirtuelle\))
[5.60396 .204735 3.24945 5.80869 3.65601 1.7469 2.49856 5.68435 3.37161 1.74689 2.49856 2.64037 
3.77808 3.24944 1.7469 1.74689 3.24945 0 ]xsh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5F93FC6E985F4FDB089B8
726C660FA9B5F57D310BE08C36ED05112B17AD96AEB48FF2FC2898E2D336EBE9
EAD56A8D07216507E5146B1B78A220C1E81864951416BE98FD5933A8730B6A85
BD795303C655D884BCE53> |-
/six <1C60D8A8C9B7A73D3B44BE741BE130889A29A62362BBF3BD4998A9716D
017BD3E90015A944479F79C367805DC4C50DB057D8E0A451E77FA8FEED04690F
091D41623ACB39AB5DC1AF72765D755468DC2818F70C26AC9F213B1838D66ABE
CDDED3650E39182CCE464B3439BDD0888E3B029C3E54D01F55FD3262BD39E2B7
7913583D31FCB75B5E307697CF4A1695AF9EFBD77C943134485F13A1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 53 /five put
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/.notdef /eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef 
/C /D /E /F /G /.notdef /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /.notdef 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
63.5002 527.084 mo
(5-6)
[3.65602 2.43708 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/k <1C60D8A8C9B08A95A2AD66FCFE454F1EFB2831845203339E2D42867B9A77
F834C6F4FF8506E5560923DE8BB88C55CD98B530C8EA4F64F50AC8D2293973AF
C9CBF533> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/.notdef /eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef 
/C /D /E /F /G /.notdef /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9053 527.084 mo
(Stockagedesdonn\023ees,gestiondes\014chiers,RAID..)
[4.06258 2.64037 3.86075 3.24944 3.37016 3.51421 3.65602 5.68435 3.77807 3.24944 5.24493 3.77807 
3.65601 3.77807 3.57335 .204727 3.24945 3.24944 2.80272 4.46619 3.65601 3.24945 2.80272 2.64037 
1.7469 3.65601 6.21297 3.77808 3.24945 5.24493 3.91998 3.24945 3.77808 1.7469 3.24944 2.49855 
2.80272 4.4662 4.72209 4.87495 2.03128 5.28073 2.03128 0 ]xsh
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DCEB4B8D8151BC703373BFCD69C4860CC4C7CAE72
9374255A2E8C2B8FAA8C7B26E64DC33CC7622B931E7B81B45CC2D2EFD48720AF
B6F62F4A1DF9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef 
/C /D /E /F /G /.notdef /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U 8{/.notdef}rp /circumflex 2{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
63.5002 538.169 mo
(7-8)
[3.65602 2.43708 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: ZOQAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B08A944AAF3A41AE50384710D1AA3E893FE2A2C36FA63B3AFC
0E3259D2C693222B828C2FD4446A3985F82DA6BF06A42B4572983B1DD9646471
771E5585A146AFA17E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXC+CMSS10 /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXC+CMSS10*1 
[12{/.notdef}rp /fi 3{/.notdef}rp /dotlessi /.notdef /grave /acute 19{/.notdef}rp 
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /eight /nine /colon /semicolon 5{/.notdef}rp /A /.notdef 
/C /D /E /F /G /.notdef /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U /V 7{/.notdef}rp /circumflex 2{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /j 
/k /l /m /n /o /p /q /r 
/s /t /u /v /.notdef /x /y 134{/.notdef}rp]
JRFCXC+CMSS10 nf
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
76.9053 538.169 mo
(Virtualisation,tendances...)
[4.87495 1.74689 2.49856 2.64037 3.77808 3.51421 1.74689 1.74689 2.8027 3.51421 2.64037 1.74689 
3.65601 3.77807 4.46621 2.64036 3.24945 3.77808 3.77806 3.51421 3.77808 3.24945 3.24944 2.80272 
2.0313 2.03128 0 ]xsh
grestore
gsave
325.522 580.259 mo
568.718 580.259 li
568.718 397.861 li
325.522 397.861 li
cp
clp
325.522 580.259 mo
568.718 580.259 li
568.718 397.861 li
325.522 397.861 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
.267102 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
486.316 577.387 mo
488.587 577.387 li
488.587 575.785 li
486.316 575.785 li
cp
.308354 .28983 0 0 cmyk
@
483.455 577.586 mo
482.114 576.581 li
483.455 575.576 li
.138705 .129152 0 0 cmyk
f
491.498 577.586 mo
492.839 576.581 li
491.498 575.576 li
f
499.986 577.922 mo
502.257 577.922 li
502.257 576.319 li
499.986 576.319 li
cp
500.54 576.313 mo
500.54 575.777 li
502.819 575.777 li
502.819 577.385 li
502.283 577.385 li
501.076 575.777 mo
501.076 575.24 li
503.355 575.24 li
503.355 576.849 li
502.819 576.849 li
.308354 .28983 0 0 cmyk
@
497.993 577.586 mo
496.653 576.581 li
497.993 575.576 li
506.036 577.586 mo
507.377 576.581 li
506.036 575.576 li
.138705 .129152 0 0 cmyk
f
.40066 lw
515.882 575.911 mo
517.893 575.911 li
.308354 .28983 0 0 cmyk
@
512.531 577.586 mo
511.19 576.581 li
512.531 575.576 li
520.574 577.586 mo
521.914 576.581 li
520.574 575.576 li
.138705 .129152 0 0 cmyk
f
515.212 575.24 mo
517.222 575.24 li
515.882 576.581 mo
517.893 576.581 li
515.212 577.251 mo
517.222 577.251 li
515.882 577.922 mo
517.893 577.922 li
@
529.75 575.24 mo
531.761 575.24 li
530.42 575.911 mo
532.431 575.911 li
530.42 576.581 mo
532.431 576.581 li
.308354 .28983 0 0 cmyk
@
527.069 577.586 mo
525.728 576.581 li
527.069 575.576 li
535.112 577.586 mo
536.453 576.581 li
535.112 575.576 li
.138705 .129152 0 0 cmyk
f
529.75 577.251 mo
531.761 577.251 li
530.42 577.922 mo
532.431 577.922 li
@
544.287 575.24 mo
546.298 575.24 li
544.958 575.911 mo
546.968 575.911 li
544.958 576.581 mo
546.968 576.581 li
544.287 577.251 mo
546.298 577.251 li
544.958 577.922 mo
546.968 577.922 li
.308354 .28983 0 0 cmyk
@
560.434 576.849 mo
561.506 577.922 li
@
.267102 lw
560.608 576.252 mo
560.608 575.807 560.252 575.451 559.807 575.451 cv
559.362 575.451 559.006 575.807 559.006 576.252 cv
559.006 576.697 559.362 577.053 559.807 577.053 cv
560.252 577.053 560.608 576.697 560.608 576.252 cv
cp
@
1 lc
556.144 577.922 mo
556.869 577.922 557.485 577.318 557.485 576.581 cv
557.485 575.844 556.882 575.24 556.144 575.24 cv
555.407 575.24 554.804 575.844 554.804 576.581 cv
555.608 576.179 mo
554.804 576.849 li
553.999 576.179 li
564.188 577.922 mo
563.45 577.922 562.847 577.318 562.847 576.581 cv
562.847 575.844 563.45 575.24 564.188 575.24 cv
564.925 575.24 565.528 575.844 565.528 576.581 cv
566.332 576.179 mo
565.528 576.849 li
564.724 576.179 li
@
325.522 404.316 mo
568.718 404.316 li
568.718 397.861 li
325.522 397.861 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1 /0 /CSD get_res sepcs
0 sep
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
331.221 402.313 mo
(Pr\023esentationducoursASR2-Syst\022eme)
[2.7197 1.3338 .121368 1.89191 1.6319 1.89191 2.19803 1.53732 2.04498 1.53732 1.01566 2.12869 
3.61636 2.198 3.61636 1.89191 2.12869 2.19803 1.45398 3.05023 2.83786 2.36511 2.75455 2.12869 
1.41913 2.36511 1.96161 1.6319 1.42111 .117371 1.89194 3.38074 0 ]xsh
325.522 410.771 mo
568.718 410.771 li
568.718 404.316 li
325.522 404.316 li
cp
.824216 .796414 0 0 cmyk
f
.266767 lw
0 lc
332.691 407.499 mo
332.691 404.16 li
1 /0 /CSD get_res sepcs
0 sep
@
332.824 407.366 mo
336.163 407.366 li
@
true set_gvm
%ADOBeginSubsetFont: YIZAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXD+CMSS8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B08A95D352586DE3156FEFAED02E8A09FBAB692AFAD0A2
0D20463164145CE10F61A0161D4F8A54D40912E269EB15C10F67BFFC37C5AEE7
3165CA021021CAEAF1C0EABA52B68361> |-
/E <1C60D8A8C9B08A95E4685A4724D75D04D208634123A5C8A3AA3B5EE45505
78D8299EDDF5CC6B96E202796F1A05C0921FB74ED0DF7EBED3E347AC72604A56
E7412EBD23A0AED41EAAE72CA530DD2A1AD256EE96> |-
/v <1C60D8A8C9B08A95A31DE9FFB66A152398A4480AFC89370F2D14EC2D2E6C
1A1157FDDAD5D51273C8724A14AFDAE0ED984D36E2A50043CF20A6871D2398D3
EFE1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXD+CMSS8 /Encoding get
dup 47 /slash put
dup 69 /E put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXD+CMSS8*1 
[14{/.notdef}rp /ffi 3{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp 
/hyphen /.notdef /slash /.notdef /one /two /.notdef /four 
12{/.notdef}rp /A /B /C /D /E /F 2{/.notdef}rp 
/I 4{/.notdef}rp /N /O /P /.notdef /R /S 
/T /U 11{/.notdef}rp /a /b /c /d /e 
/f /g /.notdef /i /j /.notdef /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y 134{/.notdef}rp]
JRFCXD+CMSS8 nf
JRFCXD+CMSS8*1 [4.0066 0 0 -4.0066 0 0 ]msf
336.831 408.768 mo
(P\023edagogie/)
[2.59952 .121368 1.89191 2.19803 2.04498 2.12869 2.12869 2.12869 1.01566 3.31024 0 ]xsh
360.158 407.766 mo
(\023)sh
359.945 408.768 mo
(Evaluation)
[2.55304 1.96161 2.04498 1.01566 2.19803 2.04498 1.53732 1.01566 2.12869 0 ]xsh
325.522 417.226 mo
568.718 417.226 li
568.718 410.771 li
325.522 410.771 li
cp
.514061 .481117 0 0 cmyk
f
.90045 .872435 0 .000396735 cmyk
true set_gvm
%ADOBeginSubsetFont: SFVBAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
JRFCXE+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B08A95A31CD7D9F217DC55F0A3858BA1F9B3DAF23E2FC3
38E59E41FCA65F363CA1210EA65081CA2CFFA77074B44724A6B1995B4242EF67
1F6D3C8CB38FB31745E9871F3820CB13> |-
/g <1C60D8A8C9B08A95A31CD7D9F217DCBA037270857DAD016AE51D4410EDA7
45973C28E7621269D37937188B9E68E34ABB0C5A72A609A7299E87271E0ABC47
74D2D8CA31B2F58929BF44FC33854896D645F525702BCAE3049461EC5EA86184
8D66C047EE767AFCC6820558E167DC40532C5DDE3262AC3BB210DF2141A8CEBC
ACB9EA2A8EB81F3BF88D4F1FEBADE5FFBEAD886E960B95B0782E81B113A22DAB
655E030E15B75690C59979ACBB3A059B891FCA8CA0AFA0465ECDFA78D870A66B
1E466F09AC80AAA22E127934C645FC14C636848474C7B8A5AC887BDA510F3EC1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JRFCXE+CMSS12 /Encoding get
dup 47 /slash put
dup 103 /g put
pop
%ADOEndSubsetFont
reset_gvm
/JRFCXE+CMSS12*1 
[18{/.notdef}rp /grave /acute 19{/.notdef}rp /quoteright 5{/.notdef}rp /hyphen /.notdef 
/slash 2{/.notdef}rp /two 14{/.notdef}rp /A /.notdef /C 8{/.notdef}rp 
/L 2{/.notdef}rp /O /P /.notdef /R /S 13{/.notdef}rp 
/a /b /c /d /e /f /g /.notdef 
/i /j /.notdef /l /m /n /o /p 
/.notdef /r /s /t /u /v 2{/.notdef}rp /y 
134{/.notdef}rp]
JRFCXE+CMSS12 nf
JRFCXE+CMSS12*1 [9.61581 0 0 -9.61581 0 0 ]msf
331.221 431.34 mo
(P\023edagogie/\023evaluation)
[5.72809 .255737 4.18475 4.83005 4.50699 4.70782 4.70786 4.70782 2.21454 7.32913 7.58295 .255737 
4.18475 4.30698 4.5166 2.21454 4.83005 4.50696 3.40024 2.21454 4.70782 0 ]xsh
352.24 492.352 mo
355.489 492.352 li
355.489 489.102 li
352.24 489.102 li
cp
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 492.352 mo
(NotedeTD:contr^olecontinu+expos\023es)
[5.17908 3.65604 2.64035 5.68436 3.77808 5.69165 4.97659 7.71564 4.46622 3.24945 3.65601 3.77808 
2.64038 2.49854 0 3.65601 1.74692 5.69165 3.24945 3.65601 3.77808 2.64038 1.74689 3.77808 
6.21298 8.12222 3.24942 3.37164 3.98279 3.65604 2.59796 .204742 3.24942 0 ]xsh
352.24 503.437 mo
355.489 503.437 li
355.489 500.187 li
352.24 500.187 li
cp
.90045 .872435 0 .000396735 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
JRFCXC+CMSS10*1 [7.31203 0 0 -7.31203 0 0 ]msf
359.146 503.437 mo
(Devoirsurveill\023een\014ndesemestre)
[5.28073 3.24945 3.37161 3.65601 1.74689 4.93347 2.8027 3.77808 2.49857 3.37161 3.24945 1.74689 
1.74689 1.54947 .197449 5.69165 3.24945 6.21298 3.91998 6.21298 3.77808 5.69165 2.80273 3.24942 
5.80872 3.24942 2.8027 2.64038 2.49857 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
